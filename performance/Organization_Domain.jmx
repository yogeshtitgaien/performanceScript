<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.0 r1840935">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Orgnization Scenarios" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="URL&apos;s" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="authorization" elementType="Argument">
            <stringProp name="Argument.name">authorization</stringProp>
            <stringProp name="Argument.value">qa.30preprod.com/api-deprecated/authorization</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="organization" elementType="Argument">
            <stringProp name="Argument.name">organization</stringProp>
            <stringProp name="Argument.value">qa.30preprod.com/api-deprecated/organization</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Orgnization_Domain" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Authorization" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${authorization}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/token?grant_type=client_credentials</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic QVVUT01BVEVEX1RFU1RJTkc6dDNzdEBsbHRoM3RoMW5ncw==</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">authId</stringProp>
            <stringProp name="RegexExtractor.regex">{&quot;access_token&quot;:&quot;(.*)&quot;,&quot;token_type&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">vars.put(&quot;response&quot;, prev.getResponseCode());</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">${__javaScript(${response}==&quot;200&quot;)} </stringProp>
          <boolProp name="IfController.evaluateAll">true</boolProp>
        </IfController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SP_Create_Org" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create_Org_with_Location_PLAT_84" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;name&quot; : &quot;${randName}&quot;,&#xd;
   &quot;email&quot; : &quot;${__V(${emailId}_${__Random(1,10000,)}@qa4life.com)}&quot;,&#xd;
  &quot;phone&quot; : &quot;${randPhoneNumber}&quot;,&#xd;
  &quot;signInLink&quot; : &quot;https://test.url.qa4life.com&quot;,&#xd;
  &quot;websiteUrl&quot; : &quot;www.planet-fitness.com&quot;,&#xd;
  &quot;timezone&quot; : &quot;US/Alaska&quot;,&#xd;
  &quot;addresses&quot; : [ {&#xd;
    &quot;address1&quot; : &quot;${randStateCode}-${randStateCode}-${__Random(2,20000,)}&quot;,&#xd;
    &quot;address2&quot; : &quot;${address}_${__Random(5,50000,)}&quot;,&#xd;
    &quot;city&quot; : &quot;${city}&quot;,&#xd;
    &quot;state&quot; : &quot;${randStateCode}&quot;,&#xd;
    &quot;country&quot; : &quot;USA&quot;,&#xd;
    &quot;zipCode&quot; : &quot;${randZipCode}&quot;&#xd;
  } ],&#xd;
  &quot;locations&quot; : [ {&#xd;
    &quot;name&quot; : &quot;${randlocationName}&quot;,&#xd;
    &quot;email&quot; : &quot;${__V(${emailId}_${__Random(1,10000,)}@qa4life.com)}&quot;,&#xd;
    &quot;phone&quot; : &quot;${randPhoneNumber}&quot;,&#xd;
    &quot;timezone&quot; : &quot;US/Alaska&quot;,&#xd;
    &quot;addresses&quot; : [ {&#xd;
      &quot;address1&quot; : &quot;${randStateCode}-${__Random(1,10000,)}&quot;,&#xd;
      &quot;address2&quot; : &quot;${address}_${__Random(3,50000,)}&quot;,&#xd;
      &quot;city&quot; : &quot;${city}&quot;,&#xd;
      &quot;zipCode&quot; : &quot;${randZipCode}&quot;,&#xd;
      &quot;country&quot; : &quot;USA&quot;,&#xd;
      &quot;state&quot; : &quot;${randStateCode}&quot;&#xd;
    } ]&#xd;
  }  ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/organization</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">orgId</stringProp>
                <stringProp name="RegexExtractor.regex">,&quot;organizationId&quot;:&quot;(.*)&quot;}],&quot;timezone&quot;:&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">locId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;locations&quot;:\[{&quot;id&quot;:&quot;(.*)&quot;,&quot;name&quot;:&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// USED FOR NAME

var firstNames = [&apos;Michael Stark&apos;, &apos;Alicia Jolly&apos;, &apos;Thomas Peter&apos;, &apos;Olivia Stark&apos;, &apos;Daniel Singh&apos;, &apos;Candice Stark&apos;, &apos;Barbara Phoghat&apos;, &apos;Matthew Stark&apos;, &apos;Craig Patel&apos;,&apos;Tammy Stark&apos;,&apos;Heaven Jones&apos;,&apos;Floretta Katte&apos;,&apos;Sylvester Peter&apos;,&apos;Mandi Stark&apos;,&apos;Damion Modi&apos;,&apos;Jacklyn Jha&apos;,&apos;Taina Aggarwal&apos;,&apos;Myrtle Gupta&apos;,&apos;Ernest Pasricha&apos;,&apos;Dorsey Tina&apos;,&apos;Wilber Mehta&apos;,&apos;Lacie Kohli&apos;,&apos;Orena Yuvraj&apos;,&apos;Eliana Thakur&apos;,&apos;Marilyn Adhikari&apos;,&apos;Sharita Chaudhari&apos;,&apos;Rufina Pack&apos;,&apos;Isiah Adhikari&apos;,&apos;Lavenia Aggarwal&apos;,&apos;Coleman Adhikari&apos;,&apos;Donald Trump&apos;,&apos;Jannette Adhikari&apos;,&apos;Zaida Aggarwal&apos;,&apos;Darius Obama&apos;,&apos;Shelton Rana&apos;,&apos;Jackson Stephen&apos;,&apos;Rochelle Grey&apos;,&apos;Kermit Chaudhari&apos;,&apos;Branda&apos;,&apos;Casandra Peter&apos;,&apos;Lorna Chaudhari&apos;,&apos;Angela Peter&apos;,&apos;China India&apos;,&apos;Alena Goblin&apos;,&apos;Barrett Chaudhari&apos;,&apos;Aaron Singh&apos;,&apos;Jeffrey Sansa&apos;,&apos;Shane Kumar&apos;,&apos;Melinda Patel&apos;,&apos;Valencia Peter&apos;,&apos;Jacque Nicolus&apos;,&apos;Venessa&apos;,&apos;Harold&apos;,&apos;Charol Peter&apos;,&apos;Rebbecca Peter&apos;,&apos;Melissa&apos;,&apos;Diego Narula&apos;,&apos;Jorge Aggarwal&apos;,&apos;Katie Hanks&apos;,&apos;Denise Aggarwal&apos;,&apos;Lorita Eric&apos;,&apos;Anthony Peter&apos;,&apos;Debbie Aggarwal&apos;,&apos;Jason Nicolus&apos;,&apos;Kassie Sansa&apos;,&apos;Misty Nicolus&apos;,&apos;Misti Dianne&apos;,&apos;Lashay Tonia&apos;,&apos;Mariana Peter&apos;,&apos;Kevin Vickie&apos;,&apos;Magda Ralph&apos;,&apos;Maureen Aggarwal&apos;,&apos;Frederick Emmaline&apos;,&apos;Marylee Katelyn&apos;,&apos;Birdee Loren&apos;,&apos;Melvin Delbert&apos;,&apos;Mittie Clarence&apos;,&apos;Demetra Aggarwal&apos;,&apos;Nancy Vaughn&apos;,&apos;Arminda Garrett&apos;,&apos;Keith Trudy&apos;,&apos;Theresia Kelly&apos;];

//SYNTAX
 vars.put(&quot;randName&quot;,firstNames[Math.floor(Math.random() * firstNames.length)]);

// USED FOR Address
var address = [&apos;Savage&apos;, &apos;Stephens&apos;, &apos;Sparks&apos;, &apos;Stark&apos;, &apos;Sparks&apos;, &apos;Bottin&apos;, &apos;Jones&apos;, &apos;Arthurson&apos;, &apos;Harden&apos;, &apos;Gray&apos;, &apos;Bryson&apos;, &apos;Matthison&apos;, &apos;Wilson&apos;, &apos;Ivey&apos;, &apos;Netzley&apos;, &apos;Piche&apos;,&apos;Metz&apos;,&apos;Cass&apos;,&apos;Kuzma&apos;,&apos;Reno&apos;,&apos;Avis&apos;,&apos;Saville&apos;,&apos;Selvey&apos;,&apos;Stoecker&apos;,&apos;Auerbach&apos;,&apos;Eilerman&apos;,&apos;Holsey&apos;,&apos;Zepp&apos;,&apos;Davids&apos;,&apos;Foster&apos;,&apos;Sim&apos;,&apos;Messana&apos;,&apos;Schloss&apos;,&apos;Sylvester&apos;,&apos;Leathers&apos;,&apos;Niles&apos;,&apos;Combs&apos;,&apos;Phillips&apos;,&apos;Augsburger&apos;,&apos;Stroman&apos;,&apos;Beveridge&apos;,&apos;Gattis&apos;,&apos;Minnis&apos;,&apos;Fortes&apos;,&apos;Ullman&apos;,&apos;Bunkley&apos;,&apos;Spivey&apos;,&apos;Sterrett&apos;,&apos;Crist&apos;,&apos;Chow&apos;,&apos;Lierman&apos;,&apos;Ashalintubbi&apos;,&apos;Laura&apos;,&apos;Crawford&apos;,&apos;Balmer&apos;,&apos;Mcmullin&apos;,&apos;Dussault&apos;,&apos;Holbrook&apos;,&apos;Dion&apos;,&apos;Lechler&apos;,&apos;Beaton&apos;,&apos;Elzey&apos;,&apos;Sams&apos;,&apos;Irby&apos;,&apos;Hollaway&apos;,&apos;Levert&apos;,&apos;Gough&apos;,&apos;Croom&apos;,&apos;Dedman&apos;,&apos;Hatmaker&apos;,&apos;Tippetts&apos;,&apos;Odoms&apos;,&apos;Banaszak&apos;,&apos;Viveros&apos;,&apos;Hempstead&apos;,&apos;Tower&apos;,&apos;Atlas&apos;,&apos;Lozoya&apos;,&apos;Fulp&apos;,&apos;Corbo&apos;,&apos;Chapell&apos;,&apos;Monier&apos;,&apos;Selle&apos;,&apos;Parenti&apos;,&apos;Karl&apos;,&apos;Kuehn&apos;,&apos;Speers&apos;,&apos;Cambron&apos;,&apos;Blossom&apos;,&apos;Peart&apos;,&apos;Gunter&apos;,&apos;Hagenbuch&apos;,&apos;Amend&apos;,&apos;Tiernan&apos;,&apos;Ayala&apos;,&apos;Maclenn&apos;,&apos;Golden&apos;,&apos;Colone&apos;,&apos;Golding&apos;,&apos;Landreth&apos;,&apos;Shams&apos;,&apos;Liddle&apos;,&apos;Alley&apos;,&apos;Levy&apos;,&apos;Barajas&apos;,&apos;Tetrault&apos;,&apos;Shue&apos;,&apos;Lenton&apos;,&apos;Boss&apos;,&apos;Weedman&apos;,&apos;Bergeron&apos;,&apos;Valls&apos;,&apos;Pooler&apos;,&apos;Mollett&apos;,&apos;Viger&apos;,&apos;Donnellan&apos;,&apos;Dedeaux&apos;];
//SYNTAX
vars.put(&quot;address&quot;,address[Math.floor(Math.random() * address.length)]);
// USED FOR LastName
var lastName = [&apos;Savage&apos;, &apos;Stephens&apos;, &apos;Sparks&apos;, &apos;Stark&apos;, &apos;Sparks&apos;, &apos;Bottin&apos;, &apos;Jones&apos;, &apos;Arthurson&apos;, &apos;Harden&apos;, &apos;Gray&apos;, &apos;Bryson&apos;, &apos;Matthison&apos;, &apos;Wilson&apos;, &apos;Ivey&apos;, &apos;Netzley&apos;, &apos;Piche&apos;,&apos;Metz&apos;,&apos;Cass&apos;,&apos;Kuzma&apos;,&apos;Reno&apos;,&apos;Avis&apos;,&apos;Saville&apos;,&apos;Selvey&apos;,&apos;Stoecker&apos;,&apos;Auerbach&apos;,&apos;Eilerman&apos;,&apos;Holsey&apos;,&apos;Zepp&apos;,&apos;Davids&apos;,&apos;Foster&apos;,&apos;Sim&apos;,&apos;Messana&apos;,&apos;Schloss&apos;,&apos;Sylvester&apos;,&apos;Leathers&apos;,&apos;Niles&apos;,&apos;Combs&apos;,&apos;Phillips&apos;,&apos;Augsburger&apos;,&apos;Stroman&apos;,&apos;Beveridge&apos;,&apos;Gattis&apos;,&apos;Minnis&apos;,&apos;Fortes&apos;,&apos;Ullman&apos;,&apos;Bunkley&apos;,&apos;Spivey&apos;,&apos;Sterrett&apos;,&apos;Crist&apos;,&apos;Chow&apos;,&apos;Lierman&apos;,&apos;Ashalintubbi&apos;,&apos;Laura&apos;,&apos;Crawford&apos;,&apos;Balmer&apos;,&apos;Mcmullin&apos;,&apos;Dussault&apos;,&apos;Holbrook&apos;,&apos;Dion&apos;,&apos;Lechler&apos;,&apos;Beaton&apos;,&apos;Elzey&apos;,&apos;Sams&apos;,&apos;Irby&apos;,&apos;Hollaway&apos;,&apos;Levert&apos;,&apos;Gough&apos;,&apos;Croom&apos;,&apos;Dedman&apos;,&apos;Hatmaker&apos;,&apos;Tippetts&apos;,&apos;Odoms&apos;,&apos;Banaszak&apos;,&apos;Viveros&apos;,&apos;Hempstead&apos;,&apos;Tower&apos;,&apos;Atlas&apos;,&apos;Lozoya&apos;,&apos;Fulp&apos;,&apos;Corbo&apos;,&apos;Chapell&apos;,&apos;Monier&apos;,&apos;Selle&apos;,&apos;Parenti&apos;,&apos;Karl&apos;,&apos;Kuehn&apos;,&apos;Speers&apos;,&apos;Cambron&apos;,&apos;Blossom&apos;,&apos;Peart&apos;,&apos;Gunter&apos;,&apos;Hagenbuch&apos;,&apos;Amend&apos;,&apos;Tiernan&apos;,&apos;Ayala&apos;,&apos;Maclenn&apos;,&apos;Golden&apos;,&apos;Colone&apos;,&apos;Golding&apos;,&apos;Landreth&apos;,&apos;Shams&apos;,&apos;Liddle&apos;,&apos;Alley&apos;,&apos;Levy&apos;,&apos;Barajas&apos;,&apos;Tetrault&apos;,&apos;Shue&apos;,&apos;Lenton&apos;,&apos;Boss&apos;,&apos;Weedman&apos;,&apos;Bergeron&apos;,&apos;Valls&apos;,&apos;Pooler&apos;,&apos;Mollett&apos;,&apos;Viger&apos;,&apos;Donnellan&apos;,&apos;Dedeaux&apos;];
//SYNTAX
vars.put(&quot;lastName&quot;,lastName[Math.floor(Math.random() * lastName.length)]);

// USED FOR STATES
var states = [&apos;Alabama&apos;,&apos;Alaska&apos;,&apos;Arizona&apos;,&apos;Arkansas&apos;,&apos;California&apos;,&apos;Colorado&apos;,&apos;Connecticut&apos;,&apos;Delaware&apos;,&apos;Florida&apos;,&apos;Georgia&apos;,&apos;Hawaii&apos;,&apos;Idaho&apos;,&apos;Illinois&apos;,&apos;Indiana&apos;,&apos;Iowa&apos;,&apos;Kansas&apos;,&apos;Kentucky&apos;,&apos;Louisiana&apos;,&apos;Maine&apos;,&apos;Maryland&apos;,&apos;Massachusetts&apos;,&apos;Michigan&apos;,&apos;Minnesota&apos;,&apos;Mississippi&apos;,&apos;Missouri&apos;,&apos;Montana&apos;,&apos;Nebraska&apos;,&apos;Nevada&apos;,&apos;New Hampshire&apos;,&apos;New Jersey&apos;,&apos;New Mexico&apos;,&apos;New York&apos;,&apos;North Carolina&apos;,&apos;North Dakota&apos;,&apos;Ohio&apos;,&apos;Oklahoma&apos;,&apos;Oregon&apos;,&apos;Pennsylvania&apos;,&apos;Rhode Island&apos;,&apos;South Carolina&apos;,&apos;South Dakota&apos;,&apos;Tennessee&apos;,&apos;Texas&apos;,&apos;Utah&apos;,&apos;Vermont&apos;,&apos;Virginia&apos;,&apos;Washington&apos;,&apos;West Virginia&apos;,&apos;Wisconsin&apos;,&apos;Wyoming&apos;];
//SYNTAX
vars.put(&quot;randState&quot;,states[Math.floor(Math.random() * states.length)]);

// USED FOR STATE CODE

var scode=[&apos;AL&apos;,&apos;AK&apos;,&apos;AZ&apos;,&apos;AR&apos;,&apos;CA&apos;,&apos;CO&apos;,&apos;CT&apos;,&apos;DE&apos;,&apos;DC&apos;,&apos;FL&apos;,&apos;GA&apos;,&apos;HI&apos;,&apos;ID&apos;,&apos;IL&apos;,&apos;IN&apos;,&apos;IA&apos;,&apos;KS&apos;,&apos;KY&apos;,&apos;LA&apos;,&apos;ME&apos;,&apos;MD&apos;,&apos;MA&apos;,&apos;MI&apos;,&apos;MN&apos;,&apos;MS&apos;,&apos;MO&apos;,&apos;MT&apos;,&apos;NE&apos;,&apos;NV&apos;,&apos;NH&apos;,&apos;NJ&apos;,&apos;NM&apos;,&apos;NY&apos;,&apos;NC&apos;,&apos;ND&apos;,&apos;OH&apos;,&apos;OK&apos;,&apos;OR&apos;,&apos;PA&apos;,&apos;RI&apos;,&apos;SC&apos;,&apos;SD&apos;,&apos;TN&apos;,&apos;TX&apos;,&apos;UT&apos;,&apos;VT&apos;,&apos;VA&apos;,&apos;WA&apos;,&apos;WV&apos;,&apos;WI&apos;,&apos;WY&apos;]
//SYNTAX
vars.put(&quot;randStateCode&quot;,scode[Math.floor(Math.random() * scode.length)]);


// USED FOR LOCATION NAME

var locationName=[&apos;Franklin&apos;,&apos;Clinton&apos;,&apos;Clinton&apos;,&apos;Washington&apos;,&apos;Madison&apos;,&apos;Arlington&apos;,&apos;Franklin&apos;,&apos;Washington&apos;,&apos;Chester&apos;,&apos;Georgetown&apos;,&apos;Madison&apos;,&apos;Salem&apos;,&apos;Chester&apos;,&apos;Marion&apos;,&apos;Fairfield&apos;,&apos;Greenville&apos;,&apos;Kingston&apos;,&apos;Marion&apos;,&apos;Riverside&apos;,&apos;Springfield&apos;]

vars.put(&quot;randlocationName&quot;,locationName[Math.floor(Math.random() * locationName.length)]);


// USED FOR EMAIL
 var email=[&apos;hai.nguyen&apos;,&apos;josh.warrick&apos;,&apos;chris.jowett&apos;,&apos;mark.vanderlugt&apos;,&apos;luke.coleman&apos;,&apos;ohalushchak&apos;,&apos;timothy.werner&apos;,&apos;mike.milligan&apos;,&apos;esavrasov&apos;,&apos;srawat&apos;,&apos;avysotskaya&apos;,&apos;kdelehoidin&apos;];

//SYNTAX
vars.put(&quot;emailId&quot;,email[Math.floor(Math.random() * email.length)]);


// USED FOR CITY

var city=[&apos;New York&apos;,&apos;Philadelphia&apos;,&apos;Boston&apos;,&apos;Charleston&apos;,&apos;Baltimore&apos;,&apos;Northern Liberties&apos;,&apos;Salem&apos;,&apos;Newport&apos;,&apos;Providence&apos;,&apos;Marblehead&apos;,&apos;Southwark&apos;,&apos;Little Rock&apos;]

//Syntax

vars.put(&quot;city&quot;,city[Math.floor(Math.random() * city.length)]);

/*

// USED FOR TIME ZONE
var timezone=[&apos;US/Chicago&apos;,&apos;US/Denver&apos;,&apos;US/Phoenix&apos;,&apos;US/Los Angeles&apos;,&apos;US/Anchorage&apos;,&apos;US/Honolulu&apos;,&apos;US/Alabama&apos;,&apos;US/Florida&apos;,&apos;US/Georgia&apos;,&apos;US/Hawaii&apos;]

//Syntax
vars.put(&quot;timezone&quot;,timezone[Math.floor(Math.random() * timezone.length)]);

*/

vars.put(&quot;randZipCode&quot;,Math.floor(Math.random() * 90000) + 10000);
vars.put(&quot;randState&quot;,states[Math.floor(Math.random() * states.length)]);
vars.put(&quot;randPhoneNumber&quot;,Math.floor(Math.random() * 9000000000) + 1000000000);




</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get_Orgnizations_PLAT-87" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/organization</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get_Orgnization_PLAT_86" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/organization/${orgId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Put_Orgnization_PLAT_85" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;name&quot; : &quot;ABC financial2&quot;,&#xd;
  &quot;email&quot; : &quot;noreply8888@qa4life.com&quot;,&#xd;
  &quot;phone&quot; : {&#xd;
    &quot;number&quot; : &quot;1234567&quot;,&#xd;
    &quot;extension&quot; : &quot;38&quot;&#xd;
  },&#xd;
  &quot;signInLink&quot; : &quot;https://test2.url.qa4life.com&quot;,&#xd;
  &quot;timezone&quot; : &quot;US/Alaska&quot;,&#xd;
  &quot;id&quot; : &quot;c45f4c78-ac74-4a0e-956e-e931a79b7233&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/organization/${orgId}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete_Orgnization_PLAT-88" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/organization/${orgId}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Merge_Orgnization_PLAT-90_Not_working" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;name&quot; : &quot;Ernest Pasricha&quot;,&#xd;
  &quot;email&quot; : &quot;esavrasov_7321@qa4life.com&quot;,&#xd;
  &quot;phone&quot; : {&#xd;
    &quot;number&quot; : &quot;011VRY&quot;,&#xd;
    &quot;extension&quot; : &quot;38&quot;&#xd;
  },&#xd;
  &quot;signInLink&quot; : &quot;https://test3.url.qa4life.com&quot;,&#xd;
  &quot;timezone&quot; : &quot;US/Alaska&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/organization/b11a82a9-a5aa-4a4a-ac57-d50775b5aa84</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Patch_Orgnization_PLAT-89_Not_Working" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[ {&#xd;
  &quot;op&quot; : &quot;remove&quot;,&#xd;
  &quot;path&quot; : &quot;/email&quot;&#xd;
}, {&#xd;
  &quot;op&quot; : &quot;add&quot;,&#xd;
  &quot;path&quot; : &quot;/email&quot;,&#xd;
  &quot;value&quot; : &quot;new@qa4life.com&quot;&#xd;
}, {&#xd;
  &quot;op&quot; : &quot;test&quot;,&#xd;
  &quot;path&quot; : &quot;/name&quot;,&#xd;
  &quot;value&quot; : &quot;ABC financial&quot;&#xd;
} ]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/organization/c9e0737f-893f-4c21-b8ea-60c31b361614</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Undelete_Orgnization_PLAT_91" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;status&quot; : &quot;active&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/archive/organization/${orgId}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get_Removed_Organizations_PLAT-92" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/archive/organization?page=0&amp;size=500</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SP_Document" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Download_Waiver_Terms_Negative" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/document/download/WAIVER/${locId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="51512">404</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// USED FOR NAME

var firstNames = [&apos;Michael Stark&apos;, &apos;Alicia Jolly&apos;, &apos;Thomas Peter&apos;, &apos;Olivia Stark&apos;, &apos;Daniel Singh&apos;, &apos;Candice Stark&apos;, &apos;Barbara Phoghat&apos;, &apos;Matthew Stark&apos;, &apos;Craig Patel&apos;,&apos;Tammy Stark&apos;,&apos;Heaven Jones&apos;,&apos;Floretta Katte&apos;,&apos;Sylvester Peter&apos;,&apos;Mandi Stark&apos;,&apos;Damion Modi&apos;,&apos;Jacklyn Jha&apos;,&apos;Taina Aggarwal&apos;,&apos;Myrtle Gupta&apos;,&apos;Ernest Pasricha&apos;,&apos;Dorsey Tina&apos;,&apos;Wilber Mehta&apos;,&apos;Lacie Kohli&apos;,&apos;Orena Yuvraj&apos;,&apos;Eliana Thakur&apos;,&apos;Marilyn Adhikari&apos;,&apos;Sharita Chaudhari&apos;,&apos;Rufina Pack&apos;,&apos;Isiah Adhikari&apos;,&apos;Lavenia Aggarwal&apos;,&apos;Coleman Adhikari&apos;,&apos;Donald Trump&apos;,&apos;Jannette Adhikari&apos;,&apos;Zaida Aggarwal&apos;,&apos;Darius Obama&apos;,&apos;Shelton Rana&apos;,&apos;Jackson Stephen&apos;,&apos;Rochelle Grey&apos;,&apos;Kermit Chaudhari&apos;,&apos;Branda&apos;,&apos;Casandra Peter&apos;,&apos;Lorna Chaudhari&apos;,&apos;Angela Peter&apos;,&apos;China India&apos;,&apos;Alena Goblin&apos;,&apos;Barrett Chaudhari&apos;,&apos;Aaron Singh&apos;,&apos;Jeffrey Sansa&apos;,&apos;Shane Kumar&apos;,&apos;Melinda Patel&apos;,&apos;Valencia Peter&apos;,&apos;Jacque Nicolus&apos;,&apos;Venessa&apos;,&apos;Harold&apos;,&apos;Charol Peter&apos;,&apos;Rebbecca Peter&apos;,&apos;Melissa&apos;,&apos;Diego Narula&apos;,&apos;Jorge Aggarwal&apos;,&apos;Katie Hanks&apos;,&apos;Denise Aggarwal&apos;,&apos;Lorita Eric&apos;,&apos;Anthony Peter&apos;,&apos;Debbie Aggarwal&apos;,&apos;Jason Nicolus&apos;,&apos;Kassie Sansa&apos;,&apos;Misty Nicolus&apos;,&apos;Misti Dianne&apos;,&apos;Lashay Tonia&apos;,&apos;Mariana Peter&apos;,&apos;Kevin Vickie&apos;,&apos;Magda Ralph&apos;,&apos;Maureen Aggarwal&apos;,&apos;Frederick Emmaline&apos;,&apos;Marylee Katelyn&apos;,&apos;Birdee Loren&apos;,&apos;Melvin Delbert&apos;,&apos;Mittie Clarence&apos;,&apos;Demetra Aggarwal&apos;,&apos;Nancy Vaughn&apos;,&apos;Arminda Garrett&apos;,&apos;Keith Trudy&apos;,&apos;Theresia Kelly&apos;];

//SYNTAX
 vars.put(&quot;randName&quot;,firstNames[Math.floor(Math.random() * firstNames.length)]);

// USED FOR Address
var address = [&apos;Savage&apos;, &apos;Stephens&apos;, &apos;Sparks&apos;, &apos;Stark&apos;, &apos;Sparks&apos;, &apos;Bottin&apos;, &apos;Jones&apos;, &apos;Arthurson&apos;, &apos;Harden&apos;, &apos;Gray&apos;, &apos;Bryson&apos;, &apos;Matthison&apos;, &apos;Wilson&apos;, &apos;Ivey&apos;, &apos;Netzley&apos;, &apos;Piche&apos;,&apos;Metz&apos;,&apos;Cass&apos;,&apos;Kuzma&apos;,&apos;Reno&apos;,&apos;Avis&apos;,&apos;Saville&apos;,&apos;Selvey&apos;,&apos;Stoecker&apos;,&apos;Auerbach&apos;,&apos;Eilerman&apos;,&apos;Holsey&apos;,&apos;Zepp&apos;,&apos;Davids&apos;,&apos;Foster&apos;,&apos;Sim&apos;,&apos;Messana&apos;,&apos;Schloss&apos;,&apos;Sylvester&apos;,&apos;Leathers&apos;,&apos;Niles&apos;,&apos;Combs&apos;,&apos;Phillips&apos;,&apos;Augsburger&apos;,&apos;Stroman&apos;,&apos;Beveridge&apos;,&apos;Gattis&apos;,&apos;Minnis&apos;,&apos;Fortes&apos;,&apos;Ullman&apos;,&apos;Bunkley&apos;,&apos;Spivey&apos;,&apos;Sterrett&apos;,&apos;Crist&apos;,&apos;Chow&apos;,&apos;Lierman&apos;,&apos;Ashalintubbi&apos;,&apos;Laura&apos;,&apos;Crawford&apos;,&apos;Balmer&apos;,&apos;Mcmullin&apos;,&apos;Dussault&apos;,&apos;Holbrook&apos;,&apos;Dion&apos;,&apos;Lechler&apos;,&apos;Beaton&apos;,&apos;Elzey&apos;,&apos;Sams&apos;,&apos;Irby&apos;,&apos;Hollaway&apos;,&apos;Levert&apos;,&apos;Gough&apos;,&apos;Croom&apos;,&apos;Dedman&apos;,&apos;Hatmaker&apos;,&apos;Tippetts&apos;,&apos;Odoms&apos;,&apos;Banaszak&apos;,&apos;Viveros&apos;,&apos;Hempstead&apos;,&apos;Tower&apos;,&apos;Atlas&apos;,&apos;Lozoya&apos;,&apos;Fulp&apos;,&apos;Corbo&apos;,&apos;Chapell&apos;,&apos;Monier&apos;,&apos;Selle&apos;,&apos;Parenti&apos;,&apos;Karl&apos;,&apos;Kuehn&apos;,&apos;Speers&apos;,&apos;Cambron&apos;,&apos;Blossom&apos;,&apos;Peart&apos;,&apos;Gunter&apos;,&apos;Hagenbuch&apos;,&apos;Amend&apos;,&apos;Tiernan&apos;,&apos;Ayala&apos;,&apos;Maclenn&apos;,&apos;Golden&apos;,&apos;Colone&apos;,&apos;Golding&apos;,&apos;Landreth&apos;,&apos;Shams&apos;,&apos;Liddle&apos;,&apos;Alley&apos;,&apos;Levy&apos;,&apos;Barajas&apos;,&apos;Tetrault&apos;,&apos;Shue&apos;,&apos;Lenton&apos;,&apos;Boss&apos;,&apos;Weedman&apos;,&apos;Bergeron&apos;,&apos;Valls&apos;,&apos;Pooler&apos;,&apos;Mollett&apos;,&apos;Viger&apos;,&apos;Donnellan&apos;,&apos;Dedeaux&apos;];
//SYNTAX
vars.put(&quot;address&quot;,address[Math.floor(Math.random() * address.length)]);
// USED FOR LastName
var lastName = [&apos;Savage&apos;, &apos;Stephens&apos;, &apos;Sparks&apos;, &apos;Stark&apos;, &apos;Sparks&apos;, &apos;Bottin&apos;, &apos;Jones&apos;, &apos;Arthurson&apos;, &apos;Harden&apos;, &apos;Gray&apos;, &apos;Bryson&apos;, &apos;Matthison&apos;, &apos;Wilson&apos;, &apos;Ivey&apos;, &apos;Netzley&apos;, &apos;Piche&apos;,&apos;Metz&apos;,&apos;Cass&apos;,&apos;Kuzma&apos;,&apos;Reno&apos;,&apos;Avis&apos;,&apos;Saville&apos;,&apos;Selvey&apos;,&apos;Stoecker&apos;,&apos;Auerbach&apos;,&apos;Eilerman&apos;,&apos;Holsey&apos;,&apos;Zepp&apos;,&apos;Davids&apos;,&apos;Foster&apos;,&apos;Sim&apos;,&apos;Messana&apos;,&apos;Schloss&apos;,&apos;Sylvester&apos;,&apos;Leathers&apos;,&apos;Niles&apos;,&apos;Combs&apos;,&apos;Phillips&apos;,&apos;Augsburger&apos;,&apos;Stroman&apos;,&apos;Beveridge&apos;,&apos;Gattis&apos;,&apos;Minnis&apos;,&apos;Fortes&apos;,&apos;Ullman&apos;,&apos;Bunkley&apos;,&apos;Spivey&apos;,&apos;Sterrett&apos;,&apos;Crist&apos;,&apos;Chow&apos;,&apos;Lierman&apos;,&apos;Ashalintubbi&apos;,&apos;Laura&apos;,&apos;Crawford&apos;,&apos;Balmer&apos;,&apos;Mcmullin&apos;,&apos;Dussault&apos;,&apos;Holbrook&apos;,&apos;Dion&apos;,&apos;Lechler&apos;,&apos;Beaton&apos;,&apos;Elzey&apos;,&apos;Sams&apos;,&apos;Irby&apos;,&apos;Hollaway&apos;,&apos;Levert&apos;,&apos;Gough&apos;,&apos;Croom&apos;,&apos;Dedman&apos;,&apos;Hatmaker&apos;,&apos;Tippetts&apos;,&apos;Odoms&apos;,&apos;Banaszak&apos;,&apos;Viveros&apos;,&apos;Hempstead&apos;,&apos;Tower&apos;,&apos;Atlas&apos;,&apos;Lozoya&apos;,&apos;Fulp&apos;,&apos;Corbo&apos;,&apos;Chapell&apos;,&apos;Monier&apos;,&apos;Selle&apos;,&apos;Parenti&apos;,&apos;Karl&apos;,&apos;Kuehn&apos;,&apos;Speers&apos;,&apos;Cambron&apos;,&apos;Blossom&apos;,&apos;Peart&apos;,&apos;Gunter&apos;,&apos;Hagenbuch&apos;,&apos;Amend&apos;,&apos;Tiernan&apos;,&apos;Ayala&apos;,&apos;Maclenn&apos;,&apos;Golden&apos;,&apos;Colone&apos;,&apos;Golding&apos;,&apos;Landreth&apos;,&apos;Shams&apos;,&apos;Liddle&apos;,&apos;Alley&apos;,&apos;Levy&apos;,&apos;Barajas&apos;,&apos;Tetrault&apos;,&apos;Shue&apos;,&apos;Lenton&apos;,&apos;Boss&apos;,&apos;Weedman&apos;,&apos;Bergeron&apos;,&apos;Valls&apos;,&apos;Pooler&apos;,&apos;Mollett&apos;,&apos;Viger&apos;,&apos;Donnellan&apos;,&apos;Dedeaux&apos;];
//SYNTAX
vars.put(&quot;lastName&quot;,lastName[Math.floor(Math.random() * lastName.length)]);

// USED FOR STATES
var states = [&apos;Alabama&apos;,&apos;Alaska&apos;,&apos;Arizona&apos;,&apos;Arkansas&apos;,&apos;California&apos;,&apos;Colorado&apos;,&apos;Connecticut&apos;,&apos;Delaware&apos;,&apos;Florida&apos;,&apos;Georgia&apos;,&apos;Hawaii&apos;,&apos;Idaho&apos;,&apos;Illinois&apos;,&apos;Indiana&apos;,&apos;Iowa&apos;,&apos;Kansas&apos;,&apos;Kentucky&apos;,&apos;Louisiana&apos;,&apos;Maine&apos;,&apos;Maryland&apos;,&apos;Massachusetts&apos;,&apos;Michigan&apos;,&apos;Minnesota&apos;,&apos;Mississippi&apos;,&apos;Missouri&apos;,&apos;Montana&apos;,&apos;Nebraska&apos;,&apos;Nevada&apos;,&apos;New Hampshire&apos;,&apos;New Jersey&apos;,&apos;New Mexico&apos;,&apos;New York&apos;,&apos;North Carolina&apos;,&apos;North Dakota&apos;,&apos;Ohio&apos;,&apos;Oklahoma&apos;,&apos;Oregon&apos;,&apos;Pennsylvania&apos;,&apos;Rhode Island&apos;,&apos;South Carolina&apos;,&apos;South Dakota&apos;,&apos;Tennessee&apos;,&apos;Texas&apos;,&apos;Utah&apos;,&apos;Vermont&apos;,&apos;Virginia&apos;,&apos;Washington&apos;,&apos;West Virginia&apos;,&apos;Wisconsin&apos;,&apos;Wyoming&apos;];
//SYNTAX
vars.put(&quot;randState&quot;,states[Math.floor(Math.random() * states.length)]);

// USED FOR STATE CODE

var scode=[&apos;AL&apos;,&apos;AK&apos;,&apos;AZ&apos;,&apos;AR&apos;,&apos;CA&apos;,&apos;CO&apos;,&apos;CT&apos;,&apos;DE&apos;,&apos;DC&apos;,&apos;FL&apos;,&apos;GA&apos;,&apos;HI&apos;,&apos;ID&apos;,&apos;IL&apos;,&apos;IN&apos;,&apos;IA&apos;,&apos;KS&apos;,&apos;KY&apos;,&apos;LA&apos;,&apos;ME&apos;,&apos;MD&apos;,&apos;MA&apos;,&apos;MI&apos;,&apos;MN&apos;,&apos;MS&apos;,&apos;MO&apos;,&apos;MT&apos;,&apos;NE&apos;,&apos;NV&apos;,&apos;NH&apos;,&apos;NJ&apos;,&apos;NM&apos;,&apos;NY&apos;,&apos;NC&apos;,&apos;ND&apos;,&apos;OH&apos;,&apos;OK&apos;,&apos;OR&apos;,&apos;PA&apos;,&apos;RI&apos;,&apos;SC&apos;,&apos;SD&apos;,&apos;TN&apos;,&apos;TX&apos;,&apos;UT&apos;,&apos;VT&apos;,&apos;VA&apos;,&apos;WA&apos;,&apos;WV&apos;,&apos;WI&apos;,&apos;WY&apos;]
//SYNTAX
vars.put(&quot;randStateCode&quot;,scode[Math.floor(Math.random() * scode.length)]);


// USED FOR LOCATION NAME

var locationName=[&apos;Franklin&apos;,&apos;Clinton&apos;,&apos;Clinton&apos;,&apos;Washington&apos;,&apos;Madison&apos;,&apos;Arlington&apos;,&apos;Franklin&apos;,&apos;Washington&apos;,&apos;Chester&apos;,&apos;Georgetown&apos;,&apos;Madison&apos;,&apos;Salem&apos;,&apos;Chester&apos;,&apos;Marion&apos;,&apos;Fairfield&apos;,&apos;Greenville&apos;,&apos;Kingston&apos;,&apos;Marion&apos;,&apos;Riverside&apos;,&apos;Springfield&apos;]

vars.put(&quot;randlocationName&quot;,locationName[Math.floor(Math.random() * locationName.length)]);


// USED FOR EMAIL
 var email=[&apos;hai.nguyen&apos;,&apos;josh.warrick&apos;,&apos;chris.jowett&apos;,&apos;mark.vanderlugt&apos;,&apos;luke.coleman&apos;,&apos;ohalushchak&apos;,&apos;timothy.werner&apos;,&apos;mike.milligan&apos;,&apos;esavrasov&apos;,&apos;srawat&apos;,&apos;avysotskaya&apos;,&apos;kdelehoidin&apos;];

//SYNTAX
vars.put(&quot;emailId&quot;,email[Math.floor(Math.random() * email.length)]);


// USED FOR CITY

var city=[&apos;New York&apos;,&apos;Philadelphia&apos;,&apos;Boston&apos;,&apos;Charleston&apos;,&apos;Baltimore&apos;,&apos;Northern Liberties&apos;,&apos;Salem&apos;,&apos;Newport&apos;,&apos;Providence&apos;,&apos;Marblehead&apos;,&apos;Southwark&apos;,&apos;Little Rock&apos;]

//Syntax

vars.put(&quot;city&quot;,city[Math.floor(Math.random() * city.length)]);

/*

// USED FOR TIME ZONE
var timezone=[&apos;US/Chicago&apos;,&apos;US/Denver&apos;,&apos;US/Phoenix&apos;,&apos;US/Los Angeles&apos;,&apos;US/Anchorage&apos;,&apos;US/Honolulu&apos;,&apos;US/Alabama&apos;,&apos;US/Florida&apos;,&apos;US/Georgia&apos;,&apos;US/Hawaii&apos;]

//Syntax
vars.put(&quot;timezone&quot;,timezone[Math.floor(Math.random() * timezone.length)]);

*/

vars.put(&quot;randZipCode&quot;,Math.floor(Math.random() * 90000) + 10000);
vars.put(&quot;randState&quot;,states[Math.floor(Math.random() * states.length)]);
vars.put(&quot;randPhoneNumber&quot;,Math.floor(Math.random() * 9000000000) + 1000000000);




</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SP_Create_Location" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create_Location_PLAT-93" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;name&quot; : &quot;ABC Location&quot;,&#xd;
  &quot;email&quot; : &quot;noreply@qa4life.com&quot;,&#xd;
  &#xd;
  &quot;phone&quot; : {&#xd;
    &quot;number&quot; : &quot;1234567&quot;,&#xd;
    &quot;extension&quot; : &quot;38&quot;&#xd;
  },&#xd;
  &quot;timezone&quot; : &quot;US/Alaska&quot;,&#xd;
  &quot;cardAuthorizationDocId&quot; : &quot;8c8c92d1-55c7-4f4b-918e-1a693fa693d0&quot;,&#xd;
  &quot;waiverDocId&quot; : &quot;a1b3fedd-4d81-4df6-883f-e80aae2ab73d&quot;,&#xd;
  &quot;termsDocId&quot; : &quot;2cb3058f-b4bb-4506-9879-4cb2eade6a37&quot;,&#xd;
 &#xd;
  &quot;addresses&quot; : [ {&#xd;
    &quot;address1&quot; : &quot;AR-107&quot;,&#xd;
    &quot;address2&quot; : &quot;Sherwood&quot;,&#xd;
    &quot;city&quot; : &quot;Little Rock&quot;,&#xd;
    &quot;zipCode&quot; : &quot;72120&quot;,&#xd;
    &quot;country&quot; : &quot;USA&quot;,&#xd;
    &quot;state&quot; : &quot;AL&quot;&#xd;
  } ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/location</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ABCFS-ORGANIZATION-ID</stringProp>
                    <stringProp name="Header.value">${orgId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">locId1</stringProp>
                <stringProp name="RegexExtractor.regex">{&quot;id&quot;:&quot;(.*)&quot;,&quot;name&quot;:&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// USED FOR NAME

var firstNames = [&apos;Michael Stark&apos;, &apos;Alicia Jolly&apos;, &apos;Thomas Peter&apos;, &apos;Olivia Stark&apos;, &apos;Daniel Singh&apos;, &apos;Candice Stark&apos;, &apos;Barbara Phoghat&apos;, &apos;Matthew Stark&apos;, &apos;Craig Patel&apos;,&apos;Tammy Stark&apos;,&apos;Heaven Jones&apos;,&apos;Floretta Katte&apos;,&apos;Sylvester Peter&apos;,&apos;Mandi Stark&apos;,&apos;Damion Modi&apos;,&apos;Jacklyn Jha&apos;,&apos;Taina Aggarwal&apos;,&apos;Myrtle Gupta&apos;,&apos;Ernest Pasricha&apos;,&apos;Dorsey Tina&apos;,&apos;Wilber Mehta&apos;,&apos;Lacie Kohli&apos;,&apos;Orena Yuvraj&apos;,&apos;Eliana Thakur&apos;,&apos;Marilyn Adhikari&apos;,&apos;Sharita Chaudhari&apos;,&apos;Rufina Pack&apos;,&apos;Isiah Adhikari&apos;,&apos;Lavenia Aggarwal&apos;,&apos;Coleman Adhikari&apos;,&apos;Donald Trump&apos;,&apos;Jannette Adhikari&apos;,&apos;Zaida Aggarwal&apos;,&apos;Darius Obama&apos;,&apos;Shelton Rana&apos;,&apos;Jackson Stephen&apos;,&apos;Rochelle Grey&apos;,&apos;Kermit Chaudhari&apos;,&apos;Branda&apos;,&apos;Casandra Peter&apos;,&apos;Lorna Chaudhari&apos;,&apos;Angela Peter&apos;,&apos;China India&apos;,&apos;Alena Goblin&apos;,&apos;Barrett Chaudhari&apos;,&apos;Aaron Singh&apos;,&apos;Jeffrey Sansa&apos;,&apos;Shane Kumar&apos;,&apos;Melinda Patel&apos;,&apos;Valencia Peter&apos;,&apos;Jacque Nicolus&apos;,&apos;Venessa&apos;,&apos;Harold&apos;,&apos;Charol Peter&apos;,&apos;Rebbecca Peter&apos;,&apos;Melissa&apos;,&apos;Diego Narula&apos;,&apos;Jorge Aggarwal&apos;,&apos;Katie Hanks&apos;,&apos;Denise Aggarwal&apos;,&apos;Lorita Eric&apos;,&apos;Anthony Peter&apos;,&apos;Debbie Aggarwal&apos;,&apos;Jason Nicolus&apos;,&apos;Kassie Sansa&apos;,&apos;Misty Nicolus&apos;,&apos;Misti Dianne&apos;,&apos;Lashay Tonia&apos;,&apos;Mariana Peter&apos;,&apos;Kevin Vickie&apos;,&apos;Magda Ralph&apos;,&apos;Maureen Aggarwal&apos;,&apos;Frederick Emmaline&apos;,&apos;Marylee Katelyn&apos;,&apos;Birdee Loren&apos;,&apos;Melvin Delbert&apos;,&apos;Mittie Clarence&apos;,&apos;Demetra Aggarwal&apos;,&apos;Nancy Vaughn&apos;,&apos;Arminda Garrett&apos;,&apos;Keith Trudy&apos;,&apos;Theresia Kelly&apos;];

//SYNTAX
 vars.put(&quot;randName&quot;,firstNames[Math.floor(Math.random() * firstNames.length)]);

// USED FOR Address
var address = [&apos;Savage&apos;, &apos;Stephens&apos;, &apos;Sparks&apos;, &apos;Stark&apos;, &apos;Sparks&apos;, &apos;Bottin&apos;, &apos;Jones&apos;, &apos;Arthurson&apos;, &apos;Harden&apos;, &apos;Gray&apos;, &apos;Bryson&apos;, &apos;Matthison&apos;, &apos;Wilson&apos;, &apos;Ivey&apos;, &apos;Netzley&apos;, &apos;Piche&apos;,&apos;Metz&apos;,&apos;Cass&apos;,&apos;Kuzma&apos;,&apos;Reno&apos;,&apos;Avis&apos;,&apos;Saville&apos;,&apos;Selvey&apos;,&apos;Stoecker&apos;,&apos;Auerbach&apos;,&apos;Eilerman&apos;,&apos;Holsey&apos;,&apos;Zepp&apos;,&apos;Davids&apos;,&apos;Foster&apos;,&apos;Sim&apos;,&apos;Messana&apos;,&apos;Schloss&apos;,&apos;Sylvester&apos;,&apos;Leathers&apos;,&apos;Niles&apos;,&apos;Combs&apos;,&apos;Phillips&apos;,&apos;Augsburger&apos;,&apos;Stroman&apos;,&apos;Beveridge&apos;,&apos;Gattis&apos;,&apos;Minnis&apos;,&apos;Fortes&apos;,&apos;Ullman&apos;,&apos;Bunkley&apos;,&apos;Spivey&apos;,&apos;Sterrett&apos;,&apos;Crist&apos;,&apos;Chow&apos;,&apos;Lierman&apos;,&apos;Ashalintubbi&apos;,&apos;Laura&apos;,&apos;Crawford&apos;,&apos;Balmer&apos;,&apos;Mcmullin&apos;,&apos;Dussault&apos;,&apos;Holbrook&apos;,&apos;Dion&apos;,&apos;Lechler&apos;,&apos;Beaton&apos;,&apos;Elzey&apos;,&apos;Sams&apos;,&apos;Irby&apos;,&apos;Hollaway&apos;,&apos;Levert&apos;,&apos;Gough&apos;,&apos;Croom&apos;,&apos;Dedman&apos;,&apos;Hatmaker&apos;,&apos;Tippetts&apos;,&apos;Odoms&apos;,&apos;Banaszak&apos;,&apos;Viveros&apos;,&apos;Hempstead&apos;,&apos;Tower&apos;,&apos;Atlas&apos;,&apos;Lozoya&apos;,&apos;Fulp&apos;,&apos;Corbo&apos;,&apos;Chapell&apos;,&apos;Monier&apos;,&apos;Selle&apos;,&apos;Parenti&apos;,&apos;Karl&apos;,&apos;Kuehn&apos;,&apos;Speers&apos;,&apos;Cambron&apos;,&apos;Blossom&apos;,&apos;Peart&apos;,&apos;Gunter&apos;,&apos;Hagenbuch&apos;,&apos;Amend&apos;,&apos;Tiernan&apos;,&apos;Ayala&apos;,&apos;Maclenn&apos;,&apos;Golden&apos;,&apos;Colone&apos;,&apos;Golding&apos;,&apos;Landreth&apos;,&apos;Shams&apos;,&apos;Liddle&apos;,&apos;Alley&apos;,&apos;Levy&apos;,&apos;Barajas&apos;,&apos;Tetrault&apos;,&apos;Shue&apos;,&apos;Lenton&apos;,&apos;Boss&apos;,&apos;Weedman&apos;,&apos;Bergeron&apos;,&apos;Valls&apos;,&apos;Pooler&apos;,&apos;Mollett&apos;,&apos;Viger&apos;,&apos;Donnellan&apos;,&apos;Dedeaux&apos;];
//SYNTAX
vars.put(&quot;address&quot;,address[Math.floor(Math.random() * address.length)]);
// USED FOR LastName
var lastName = [&apos;Savage&apos;, &apos;Stephens&apos;, &apos;Sparks&apos;, &apos;Stark&apos;, &apos;Sparks&apos;, &apos;Bottin&apos;, &apos;Jones&apos;, &apos;Arthurson&apos;, &apos;Harden&apos;, &apos;Gray&apos;, &apos;Bryson&apos;, &apos;Matthison&apos;, &apos;Wilson&apos;, &apos;Ivey&apos;, &apos;Netzley&apos;, &apos;Piche&apos;,&apos;Metz&apos;,&apos;Cass&apos;,&apos;Kuzma&apos;,&apos;Reno&apos;,&apos;Avis&apos;,&apos;Saville&apos;,&apos;Selvey&apos;,&apos;Stoecker&apos;,&apos;Auerbach&apos;,&apos;Eilerman&apos;,&apos;Holsey&apos;,&apos;Zepp&apos;,&apos;Davids&apos;,&apos;Foster&apos;,&apos;Sim&apos;,&apos;Messana&apos;,&apos;Schloss&apos;,&apos;Sylvester&apos;,&apos;Leathers&apos;,&apos;Niles&apos;,&apos;Combs&apos;,&apos;Phillips&apos;,&apos;Augsburger&apos;,&apos;Stroman&apos;,&apos;Beveridge&apos;,&apos;Gattis&apos;,&apos;Minnis&apos;,&apos;Fortes&apos;,&apos;Ullman&apos;,&apos;Bunkley&apos;,&apos;Spivey&apos;,&apos;Sterrett&apos;,&apos;Crist&apos;,&apos;Chow&apos;,&apos;Lierman&apos;,&apos;Ashalintubbi&apos;,&apos;Laura&apos;,&apos;Crawford&apos;,&apos;Balmer&apos;,&apos;Mcmullin&apos;,&apos;Dussault&apos;,&apos;Holbrook&apos;,&apos;Dion&apos;,&apos;Lechler&apos;,&apos;Beaton&apos;,&apos;Elzey&apos;,&apos;Sams&apos;,&apos;Irby&apos;,&apos;Hollaway&apos;,&apos;Levert&apos;,&apos;Gough&apos;,&apos;Croom&apos;,&apos;Dedman&apos;,&apos;Hatmaker&apos;,&apos;Tippetts&apos;,&apos;Odoms&apos;,&apos;Banaszak&apos;,&apos;Viveros&apos;,&apos;Hempstead&apos;,&apos;Tower&apos;,&apos;Atlas&apos;,&apos;Lozoya&apos;,&apos;Fulp&apos;,&apos;Corbo&apos;,&apos;Chapell&apos;,&apos;Monier&apos;,&apos;Selle&apos;,&apos;Parenti&apos;,&apos;Karl&apos;,&apos;Kuehn&apos;,&apos;Speers&apos;,&apos;Cambron&apos;,&apos;Blossom&apos;,&apos;Peart&apos;,&apos;Gunter&apos;,&apos;Hagenbuch&apos;,&apos;Amend&apos;,&apos;Tiernan&apos;,&apos;Ayala&apos;,&apos;Maclenn&apos;,&apos;Golden&apos;,&apos;Colone&apos;,&apos;Golding&apos;,&apos;Landreth&apos;,&apos;Shams&apos;,&apos;Liddle&apos;,&apos;Alley&apos;,&apos;Levy&apos;,&apos;Barajas&apos;,&apos;Tetrault&apos;,&apos;Shue&apos;,&apos;Lenton&apos;,&apos;Boss&apos;,&apos;Weedman&apos;,&apos;Bergeron&apos;,&apos;Valls&apos;,&apos;Pooler&apos;,&apos;Mollett&apos;,&apos;Viger&apos;,&apos;Donnellan&apos;,&apos;Dedeaux&apos;];
//SYNTAX
vars.put(&quot;lastName&quot;,lastName[Math.floor(Math.random() * lastName.length)]);

// USED FOR STATES
var states = [&apos;Alabama&apos;,&apos;Alaska&apos;,&apos;Arizona&apos;,&apos;Arkansas&apos;,&apos;California&apos;,&apos;Colorado&apos;,&apos;Connecticut&apos;,&apos;Delaware&apos;,&apos;Florida&apos;,&apos;Georgia&apos;,&apos;Hawaii&apos;,&apos;Idaho&apos;,&apos;Illinois&apos;,&apos;Indiana&apos;,&apos;Iowa&apos;,&apos;Kansas&apos;,&apos;Kentucky&apos;,&apos;Louisiana&apos;,&apos;Maine&apos;,&apos;Maryland&apos;,&apos;Massachusetts&apos;,&apos;Michigan&apos;,&apos;Minnesota&apos;,&apos;Mississippi&apos;,&apos;Missouri&apos;,&apos;Montana&apos;,&apos;Nebraska&apos;,&apos;Nevada&apos;,&apos;New Hampshire&apos;,&apos;New Jersey&apos;,&apos;New Mexico&apos;,&apos;New York&apos;,&apos;North Carolina&apos;,&apos;North Dakota&apos;,&apos;Ohio&apos;,&apos;Oklahoma&apos;,&apos;Oregon&apos;,&apos;Pennsylvania&apos;,&apos;Rhode Island&apos;,&apos;South Carolina&apos;,&apos;South Dakota&apos;,&apos;Tennessee&apos;,&apos;Texas&apos;,&apos;Utah&apos;,&apos;Vermont&apos;,&apos;Virginia&apos;,&apos;Washington&apos;,&apos;West Virginia&apos;,&apos;Wisconsin&apos;,&apos;Wyoming&apos;];
//SYNTAX
vars.put(&quot;randState&quot;,states[Math.floor(Math.random() * states.length)]);

// USED FOR STATE CODE

var scode=[&apos;AL&apos;,&apos;AK&apos;,&apos;AZ&apos;,&apos;AR&apos;,&apos;CA&apos;,&apos;CO&apos;,&apos;CT&apos;,&apos;DE&apos;,&apos;DC&apos;,&apos;FL&apos;,&apos;GA&apos;,&apos;HI&apos;,&apos;ID&apos;,&apos;IL&apos;,&apos;IN&apos;,&apos;IA&apos;,&apos;KS&apos;,&apos;KY&apos;,&apos;LA&apos;,&apos;ME&apos;,&apos;MD&apos;,&apos;MA&apos;,&apos;MI&apos;,&apos;MN&apos;,&apos;MS&apos;,&apos;MO&apos;,&apos;MT&apos;,&apos;NE&apos;,&apos;NV&apos;,&apos;NH&apos;,&apos;NJ&apos;,&apos;NM&apos;,&apos;NY&apos;,&apos;NC&apos;,&apos;ND&apos;,&apos;OH&apos;,&apos;OK&apos;,&apos;OR&apos;,&apos;PA&apos;,&apos;RI&apos;,&apos;SC&apos;,&apos;SD&apos;,&apos;TN&apos;,&apos;TX&apos;,&apos;UT&apos;,&apos;VT&apos;,&apos;VA&apos;,&apos;WA&apos;,&apos;WV&apos;,&apos;WI&apos;,&apos;WY&apos;]
//SYNTAX
vars.put(&quot;randStateCode&quot;,scode[Math.floor(Math.random() * scode.length)]);


// USED FOR LOCATION NAME

var locationName=[&apos;Franklin&apos;,&apos;Clinton&apos;,&apos;Clinton&apos;,&apos;Washington&apos;,&apos;Madison&apos;,&apos;Arlington&apos;,&apos;Franklin&apos;,&apos;Washington&apos;,&apos;Chester&apos;,&apos;Georgetown&apos;,&apos;Madison&apos;,&apos;Salem&apos;,&apos;Chester&apos;,&apos;Marion&apos;,&apos;Fairfield&apos;,&apos;Greenville&apos;,&apos;Kingston&apos;,&apos;Marion&apos;,&apos;Riverside&apos;,&apos;Springfield&apos;]

vars.put(&quot;randlocationName&quot;,locationName[Math.floor(Math.random() * locationName.length)]);


// USED FOR EMAIL
 var email=[&apos;hai.nguyen&apos;,&apos;josh.warrick&apos;,&apos;chris.jowett&apos;,&apos;mark.vanderlugt&apos;,&apos;luke.coleman&apos;,&apos;ohalushchak&apos;,&apos;timothy.werner&apos;,&apos;mike.milligan&apos;,&apos;esavrasov&apos;,&apos;srawat&apos;,&apos;avysotskaya&apos;,&apos;kdelehoidin&apos;];

//SYNTAX
vars.put(&quot;emailId&quot;,email[Math.floor(Math.random() * email.length)]);


// USED FOR CITY

var city=[&apos;New York&apos;,&apos;Philadelphia&apos;,&apos;Boston&apos;,&apos;Charleston&apos;,&apos;Baltimore&apos;,&apos;Northern Liberties&apos;,&apos;Salem&apos;,&apos;Newport&apos;,&apos;Providence&apos;,&apos;Marblehead&apos;,&apos;Southwark&apos;,&apos;Little Rock&apos;]

//Syntax

vars.put(&quot;city&quot;,city[Math.floor(Math.random() * city.length)]);

/*

// USED FOR TIME ZONE
var timezone=[&apos;US/Chicago&apos;,&apos;US/Denver&apos;,&apos;US/Phoenix&apos;,&apos;US/Los Angeles&apos;,&apos;US/Anchorage&apos;,&apos;US/Honolulu&apos;,&apos;US/Alabama&apos;,&apos;US/Florida&apos;,&apos;US/Georgia&apos;,&apos;US/Hawaii&apos;]

//Syntax
vars.put(&quot;timezone&quot;,timezone[Math.floor(Math.random() * timezone.length)]);

*/

vars.put(&quot;randZipCode&quot;,Math.floor(Math.random() * 90000) + 10000);
vars.put(&quot;randState&quot;,states[Math.floor(Math.random() * states.length)]);
vars.put(&quot;randPhoneNumber&quot;,Math.floor(Math.random() * 9000000000) + 1000000000);




</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Serach_Locations_PLAT-96" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/location</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get_Location_PLAT-95" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/location/${locId1}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Merge_Location_PLAT-97_Not_Working" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;name&quot; : &quot;Updated Location&quot;,&#xd;
  &quot;email&quot; : &quot;updated.reply@qa4life.com&quot;,&#xd;
  &quot;phone&quot; : {&#xd;
    &quot;number&quot; : &quot;1234567&quot;,&#xd;
    &quot;extension&quot; : &quot;38&quot;&#xd;
  },&#xd;
  &quot;timezone&quot; : &quot;US/Alaska&quot;,&#xd;
  &quot;cardAuthorizationDocId&quot; : &quot;d7b3ffe0-b43a-4069-bcb3-67d5b2e66dcb&quot;,&#xd;
  &quot;waiverDocId&quot; : &quot;6718c703-9315-4566-99d2-f71aa5e3c700&quot;,&#xd;
  &quot;termsDocId&quot; : &quot;768fb43a-0e80-4ab7-bdd3-e6d7471562ff&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/location/6718c703-9315-4566-99d2-f71aa5e3c700</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Patch_Location_PLAT-98_Not_Working" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[ {&#xd;
  &quot;op&quot; : &quot;remove&quot;,&#xd;
  &quot;path&quot; : &quot;/email&quot;&#xd;
}, {&#xd;
  &quot;op&quot; : &quot;add&quot;,&#xd;
  &quot;path&quot; : &quot;/email&quot;,&#xd;
  &quot;value&quot; : &quot;new@qa4life.com&quot;&#xd;
}, {&#xd;
  &quot;op&quot; : &quot;test&quot;,&#xd;
  &quot;path&quot; : &quot;/name&quot;,&#xd;
  &quot;value&quot; : &quot;ABC Location&quot;&#xd;
} ]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/location/${locId}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Put_Location_PLAT-94" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;name&quot; : &quot;Updated ABC Location&quot;,&#xd;
  &quot;email&quot; : &quot;updated.noreply@qa4life.com&quot;,&#xd;
  &quot;phone&quot; : {&#xd;
    &quot;number&quot; : &quot;1234567&quot;,&#xd;
    &quot;extension&quot; : &quot;38&quot;&#xd;
  },&#xd;
  &quot;timezone&quot; : &quot;US/Alaska&quot;,&#xd;
  &quot;cardAuthorizationDocId&quot; : &quot;d129b90d-d6e7-46a1-8088-cf80d77e5335&quot;,&#xd;
  &quot;waiverDocId&quot; : &quot;0c83fdcd-1bde-4f87-8a53-ada66275361c&quot;,&#xd;
  &quot;termsDocId&quot; : &quot;23e85679-a000-4b2d-9782-3069cf9f9090&quot;,&#xd;
  &quot;id&quot; : &quot;11e915ce-7a72-7b36-87d2-1970bc01d257&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/location/${locId}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete_Location_PLAT-99" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/location/${locId}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get_Removed_Locations_PLAT-100" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/archive/location?page=0&amp;size=500</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Undelete_Orgnization" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;status&quot; : &quot;active&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/archive/location/${locId}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create_Location_Note_Not_Working" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
 &quot;locationId&quot;:&quot;${locId}&quot;,&#xd;
  &quot;note&quot; : {&#xd;
    &quot;text&quot; : &quot;ABC&quot;&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/location/${locId}/note</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">locId1</stringProp>
                <stringProp name="RegexExtractor.regex">{&quot;id&quot;:&quot;(.*)&quot;,&quot;name&quot;:&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// USED FOR NAME

var firstNames = [&apos;Michael Stark&apos;, &apos;Alicia Jolly&apos;, &apos;Thomas Peter&apos;, &apos;Olivia Stark&apos;, &apos;Daniel Singh&apos;, &apos;Candice Stark&apos;, &apos;Barbara Phoghat&apos;, &apos;Matthew Stark&apos;, &apos;Craig Patel&apos;,&apos;Tammy Stark&apos;,&apos;Heaven Jones&apos;,&apos;Floretta Katte&apos;,&apos;Sylvester Peter&apos;,&apos;Mandi Stark&apos;,&apos;Damion Modi&apos;,&apos;Jacklyn Jha&apos;,&apos;Taina Aggarwal&apos;,&apos;Myrtle Gupta&apos;,&apos;Ernest Pasricha&apos;,&apos;Dorsey Tina&apos;,&apos;Wilber Mehta&apos;,&apos;Lacie Kohli&apos;,&apos;Orena Yuvraj&apos;,&apos;Eliana Thakur&apos;,&apos;Marilyn Adhikari&apos;,&apos;Sharita Chaudhari&apos;,&apos;Rufina Pack&apos;,&apos;Isiah Adhikari&apos;,&apos;Lavenia Aggarwal&apos;,&apos;Coleman Adhikari&apos;,&apos;Donald Trump&apos;,&apos;Jannette Adhikari&apos;,&apos;Zaida Aggarwal&apos;,&apos;Darius Obama&apos;,&apos;Shelton Rana&apos;,&apos;Jackson Stephen&apos;,&apos;Rochelle Grey&apos;,&apos;Kermit Chaudhari&apos;,&apos;Branda&apos;,&apos;Casandra Peter&apos;,&apos;Lorna Chaudhari&apos;,&apos;Angela Peter&apos;,&apos;China India&apos;,&apos;Alena Goblin&apos;,&apos;Barrett Chaudhari&apos;,&apos;Aaron Singh&apos;,&apos;Jeffrey Sansa&apos;,&apos;Shane Kumar&apos;,&apos;Melinda Patel&apos;,&apos;Valencia Peter&apos;,&apos;Jacque Nicolus&apos;,&apos;Venessa&apos;,&apos;Harold&apos;,&apos;Charol Peter&apos;,&apos;Rebbecca Peter&apos;,&apos;Melissa&apos;,&apos;Diego Narula&apos;,&apos;Jorge Aggarwal&apos;,&apos;Katie Hanks&apos;,&apos;Denise Aggarwal&apos;,&apos;Lorita Eric&apos;,&apos;Anthony Peter&apos;,&apos;Debbie Aggarwal&apos;,&apos;Jason Nicolus&apos;,&apos;Kassie Sansa&apos;,&apos;Misty Nicolus&apos;,&apos;Misti Dianne&apos;,&apos;Lashay Tonia&apos;,&apos;Mariana Peter&apos;,&apos;Kevin Vickie&apos;,&apos;Magda Ralph&apos;,&apos;Maureen Aggarwal&apos;,&apos;Frederick Emmaline&apos;,&apos;Marylee Katelyn&apos;,&apos;Birdee Loren&apos;,&apos;Melvin Delbert&apos;,&apos;Mittie Clarence&apos;,&apos;Demetra Aggarwal&apos;,&apos;Nancy Vaughn&apos;,&apos;Arminda Garrett&apos;,&apos;Keith Trudy&apos;,&apos;Theresia Kelly&apos;];

//SYNTAX
 vars.put(&quot;randName&quot;,firstNames[Math.floor(Math.random() * firstNames.length)]);

// USED FOR Address
var address = [&apos;Savage&apos;, &apos;Stephens&apos;, &apos;Sparks&apos;, &apos;Stark&apos;, &apos;Sparks&apos;, &apos;Bottin&apos;, &apos;Jones&apos;, &apos;Arthurson&apos;, &apos;Harden&apos;, &apos;Gray&apos;, &apos;Bryson&apos;, &apos;Matthison&apos;, &apos;Wilson&apos;, &apos;Ivey&apos;, &apos;Netzley&apos;, &apos;Piche&apos;,&apos;Metz&apos;,&apos;Cass&apos;,&apos;Kuzma&apos;,&apos;Reno&apos;,&apos;Avis&apos;,&apos;Saville&apos;,&apos;Selvey&apos;,&apos;Stoecker&apos;,&apos;Auerbach&apos;,&apos;Eilerman&apos;,&apos;Holsey&apos;,&apos;Zepp&apos;,&apos;Davids&apos;,&apos;Foster&apos;,&apos;Sim&apos;,&apos;Messana&apos;,&apos;Schloss&apos;,&apos;Sylvester&apos;,&apos;Leathers&apos;,&apos;Niles&apos;,&apos;Combs&apos;,&apos;Phillips&apos;,&apos;Augsburger&apos;,&apos;Stroman&apos;,&apos;Beveridge&apos;,&apos;Gattis&apos;,&apos;Minnis&apos;,&apos;Fortes&apos;,&apos;Ullman&apos;,&apos;Bunkley&apos;,&apos;Spivey&apos;,&apos;Sterrett&apos;,&apos;Crist&apos;,&apos;Chow&apos;,&apos;Lierman&apos;,&apos;Ashalintubbi&apos;,&apos;Laura&apos;,&apos;Crawford&apos;,&apos;Balmer&apos;,&apos;Mcmullin&apos;,&apos;Dussault&apos;,&apos;Holbrook&apos;,&apos;Dion&apos;,&apos;Lechler&apos;,&apos;Beaton&apos;,&apos;Elzey&apos;,&apos;Sams&apos;,&apos;Irby&apos;,&apos;Hollaway&apos;,&apos;Levert&apos;,&apos;Gough&apos;,&apos;Croom&apos;,&apos;Dedman&apos;,&apos;Hatmaker&apos;,&apos;Tippetts&apos;,&apos;Odoms&apos;,&apos;Banaszak&apos;,&apos;Viveros&apos;,&apos;Hempstead&apos;,&apos;Tower&apos;,&apos;Atlas&apos;,&apos;Lozoya&apos;,&apos;Fulp&apos;,&apos;Corbo&apos;,&apos;Chapell&apos;,&apos;Monier&apos;,&apos;Selle&apos;,&apos;Parenti&apos;,&apos;Karl&apos;,&apos;Kuehn&apos;,&apos;Speers&apos;,&apos;Cambron&apos;,&apos;Blossom&apos;,&apos;Peart&apos;,&apos;Gunter&apos;,&apos;Hagenbuch&apos;,&apos;Amend&apos;,&apos;Tiernan&apos;,&apos;Ayala&apos;,&apos;Maclenn&apos;,&apos;Golden&apos;,&apos;Colone&apos;,&apos;Golding&apos;,&apos;Landreth&apos;,&apos;Shams&apos;,&apos;Liddle&apos;,&apos;Alley&apos;,&apos;Levy&apos;,&apos;Barajas&apos;,&apos;Tetrault&apos;,&apos;Shue&apos;,&apos;Lenton&apos;,&apos;Boss&apos;,&apos;Weedman&apos;,&apos;Bergeron&apos;,&apos;Valls&apos;,&apos;Pooler&apos;,&apos;Mollett&apos;,&apos;Viger&apos;,&apos;Donnellan&apos;,&apos;Dedeaux&apos;];
//SYNTAX
vars.put(&quot;address&quot;,address[Math.floor(Math.random() * address.length)]);
// USED FOR LastName
var lastName = [&apos;Savage&apos;, &apos;Stephens&apos;, &apos;Sparks&apos;, &apos;Stark&apos;, &apos;Sparks&apos;, &apos;Bottin&apos;, &apos;Jones&apos;, &apos;Arthurson&apos;, &apos;Harden&apos;, &apos;Gray&apos;, &apos;Bryson&apos;, &apos;Matthison&apos;, &apos;Wilson&apos;, &apos;Ivey&apos;, &apos;Netzley&apos;, &apos;Piche&apos;,&apos;Metz&apos;,&apos;Cass&apos;,&apos;Kuzma&apos;,&apos;Reno&apos;,&apos;Avis&apos;,&apos;Saville&apos;,&apos;Selvey&apos;,&apos;Stoecker&apos;,&apos;Auerbach&apos;,&apos;Eilerman&apos;,&apos;Holsey&apos;,&apos;Zepp&apos;,&apos;Davids&apos;,&apos;Foster&apos;,&apos;Sim&apos;,&apos;Messana&apos;,&apos;Schloss&apos;,&apos;Sylvester&apos;,&apos;Leathers&apos;,&apos;Niles&apos;,&apos;Combs&apos;,&apos;Phillips&apos;,&apos;Augsburger&apos;,&apos;Stroman&apos;,&apos;Beveridge&apos;,&apos;Gattis&apos;,&apos;Minnis&apos;,&apos;Fortes&apos;,&apos;Ullman&apos;,&apos;Bunkley&apos;,&apos;Spivey&apos;,&apos;Sterrett&apos;,&apos;Crist&apos;,&apos;Chow&apos;,&apos;Lierman&apos;,&apos;Ashalintubbi&apos;,&apos;Laura&apos;,&apos;Crawford&apos;,&apos;Balmer&apos;,&apos;Mcmullin&apos;,&apos;Dussault&apos;,&apos;Holbrook&apos;,&apos;Dion&apos;,&apos;Lechler&apos;,&apos;Beaton&apos;,&apos;Elzey&apos;,&apos;Sams&apos;,&apos;Irby&apos;,&apos;Hollaway&apos;,&apos;Levert&apos;,&apos;Gough&apos;,&apos;Croom&apos;,&apos;Dedman&apos;,&apos;Hatmaker&apos;,&apos;Tippetts&apos;,&apos;Odoms&apos;,&apos;Banaszak&apos;,&apos;Viveros&apos;,&apos;Hempstead&apos;,&apos;Tower&apos;,&apos;Atlas&apos;,&apos;Lozoya&apos;,&apos;Fulp&apos;,&apos;Corbo&apos;,&apos;Chapell&apos;,&apos;Monier&apos;,&apos;Selle&apos;,&apos;Parenti&apos;,&apos;Karl&apos;,&apos;Kuehn&apos;,&apos;Speers&apos;,&apos;Cambron&apos;,&apos;Blossom&apos;,&apos;Peart&apos;,&apos;Gunter&apos;,&apos;Hagenbuch&apos;,&apos;Amend&apos;,&apos;Tiernan&apos;,&apos;Ayala&apos;,&apos;Maclenn&apos;,&apos;Golden&apos;,&apos;Colone&apos;,&apos;Golding&apos;,&apos;Landreth&apos;,&apos;Shams&apos;,&apos;Liddle&apos;,&apos;Alley&apos;,&apos;Levy&apos;,&apos;Barajas&apos;,&apos;Tetrault&apos;,&apos;Shue&apos;,&apos;Lenton&apos;,&apos;Boss&apos;,&apos;Weedman&apos;,&apos;Bergeron&apos;,&apos;Valls&apos;,&apos;Pooler&apos;,&apos;Mollett&apos;,&apos;Viger&apos;,&apos;Donnellan&apos;,&apos;Dedeaux&apos;];
//SYNTAX
vars.put(&quot;lastName&quot;,lastName[Math.floor(Math.random() * lastName.length)]);

// USED FOR STATES
var states = [&apos;Alabama&apos;,&apos;Alaska&apos;,&apos;Arizona&apos;,&apos;Arkansas&apos;,&apos;California&apos;,&apos;Colorado&apos;,&apos;Connecticut&apos;,&apos;Delaware&apos;,&apos;Florida&apos;,&apos;Georgia&apos;,&apos;Hawaii&apos;,&apos;Idaho&apos;,&apos;Illinois&apos;,&apos;Indiana&apos;,&apos;Iowa&apos;,&apos;Kansas&apos;,&apos;Kentucky&apos;,&apos;Louisiana&apos;,&apos;Maine&apos;,&apos;Maryland&apos;,&apos;Massachusetts&apos;,&apos;Michigan&apos;,&apos;Minnesota&apos;,&apos;Mississippi&apos;,&apos;Missouri&apos;,&apos;Montana&apos;,&apos;Nebraska&apos;,&apos;Nevada&apos;,&apos;New Hampshire&apos;,&apos;New Jersey&apos;,&apos;New Mexico&apos;,&apos;New York&apos;,&apos;North Carolina&apos;,&apos;North Dakota&apos;,&apos;Ohio&apos;,&apos;Oklahoma&apos;,&apos;Oregon&apos;,&apos;Pennsylvania&apos;,&apos;Rhode Island&apos;,&apos;South Carolina&apos;,&apos;South Dakota&apos;,&apos;Tennessee&apos;,&apos;Texas&apos;,&apos;Utah&apos;,&apos;Vermont&apos;,&apos;Virginia&apos;,&apos;Washington&apos;,&apos;West Virginia&apos;,&apos;Wisconsin&apos;,&apos;Wyoming&apos;];
//SYNTAX
vars.put(&quot;randState&quot;,states[Math.floor(Math.random() * states.length)]);

// USED FOR STATE CODE

var scode=[&apos;AL&apos;,&apos;AK&apos;,&apos;AZ&apos;,&apos;AR&apos;,&apos;CA&apos;,&apos;CO&apos;,&apos;CT&apos;,&apos;DE&apos;,&apos;DC&apos;,&apos;FL&apos;,&apos;GA&apos;,&apos;HI&apos;,&apos;ID&apos;,&apos;IL&apos;,&apos;IN&apos;,&apos;IA&apos;,&apos;KS&apos;,&apos;KY&apos;,&apos;LA&apos;,&apos;ME&apos;,&apos;MD&apos;,&apos;MA&apos;,&apos;MI&apos;,&apos;MN&apos;,&apos;MS&apos;,&apos;MO&apos;,&apos;MT&apos;,&apos;NE&apos;,&apos;NV&apos;,&apos;NH&apos;,&apos;NJ&apos;,&apos;NM&apos;,&apos;NY&apos;,&apos;NC&apos;,&apos;ND&apos;,&apos;OH&apos;,&apos;OK&apos;,&apos;OR&apos;,&apos;PA&apos;,&apos;RI&apos;,&apos;SC&apos;,&apos;SD&apos;,&apos;TN&apos;,&apos;TX&apos;,&apos;UT&apos;,&apos;VT&apos;,&apos;VA&apos;,&apos;WA&apos;,&apos;WV&apos;,&apos;WI&apos;,&apos;WY&apos;]
//SYNTAX
vars.put(&quot;randStateCode&quot;,scode[Math.floor(Math.random() * scode.length)]);


// USED FOR LOCATION NAME

var locationName=[&apos;Franklin&apos;,&apos;Clinton&apos;,&apos;Clinton&apos;,&apos;Washington&apos;,&apos;Madison&apos;,&apos;Arlington&apos;,&apos;Franklin&apos;,&apos;Washington&apos;,&apos;Chester&apos;,&apos;Georgetown&apos;,&apos;Madison&apos;,&apos;Salem&apos;,&apos;Chester&apos;,&apos;Marion&apos;,&apos;Fairfield&apos;,&apos;Greenville&apos;,&apos;Kingston&apos;,&apos;Marion&apos;,&apos;Riverside&apos;,&apos;Springfield&apos;]

vars.put(&quot;randlocationName&quot;,locationName[Math.floor(Math.random() * locationName.length)]);


// USED FOR EMAIL
 var email=[&apos;hai.nguyen&apos;,&apos;josh.warrick&apos;,&apos;chris.jowett&apos;,&apos;mark.vanderlugt&apos;,&apos;luke.coleman&apos;,&apos;ohalushchak&apos;,&apos;timothy.werner&apos;,&apos;mike.milligan&apos;,&apos;esavrasov&apos;,&apos;srawat&apos;,&apos;avysotskaya&apos;,&apos;kdelehoidin&apos;];

//SYNTAX
vars.put(&quot;emailId&quot;,email[Math.floor(Math.random() * email.length)]);


// USED FOR CITY

var city=[&apos;New York&apos;,&apos;Philadelphia&apos;,&apos;Boston&apos;,&apos;Charleston&apos;,&apos;Baltimore&apos;,&apos;Northern Liberties&apos;,&apos;Salem&apos;,&apos;Newport&apos;,&apos;Providence&apos;,&apos;Marblehead&apos;,&apos;Southwark&apos;,&apos;Little Rock&apos;]

//Syntax

vars.put(&quot;city&quot;,city[Math.floor(Math.random() * city.length)]);

/*

// USED FOR TIME ZONE
var timezone=[&apos;US/Chicago&apos;,&apos;US/Denver&apos;,&apos;US/Phoenix&apos;,&apos;US/Los Angeles&apos;,&apos;US/Anchorage&apos;,&apos;US/Honolulu&apos;,&apos;US/Alabama&apos;,&apos;US/Florida&apos;,&apos;US/Georgia&apos;,&apos;US/Hawaii&apos;]

//Syntax
vars.put(&quot;timezone&quot;,timezone[Math.floor(Math.random() * timezone.length)]);

*/

vars.put(&quot;randZipCode&quot;,Math.floor(Math.random() * 90000) + 10000);
vars.put(&quot;randState&quot;,states[Math.floor(Math.random() * states.length)]);
vars.put(&quot;randPhoneNumber&quot;,Math.floor(Math.random() * 9000000000) + 1000000000);




</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SP_Employee" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create_Employee" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;firstName&quot; : &quot;John&quot;,&#xd;
  &quot;lastName&quot; : &quot;Doe&quot;,&#xd;
  &quot;birthDate&quot; : &quot;1977-07-07&quot;,&#xd;
  &quot;email&quot; : &quot;1john.doe@qa4life.com&quot;,&#xd;
  &quot;phone&quot; : {&#xd;
    &quot;number&quot; : &quot;1123456&quot;,&#xd;
    &quot;extension&quot; : &quot;38&quot;&#xd;
  },&#xd;
  &quot;active&quot; : true,&#xd;
  &quot;description&quot; : &quot;Employee description&quot;,&#xd;
  &quot;addresses&quot; : [ {&#xd;
    &quot;address1&quot; : &quot;AR-101&quot;,&#xd;
    &quot;address2&quot; : &quot;Sherwood&quot;,&#xd;
    &quot;city&quot; : &quot;Little Rock&quot;,&#xd;
    &quot;state&quot; : &quot;AR&quot;,&#xd;
    &quot;country&quot; : &quot;USA&quot;,&#xd;
    &quot;zipCode&quot; : &quot;72120&quot;&#xd;
  } ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/employee</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ABCFS-ORGANIZATION-ID</stringProp>
                    <stringProp name="Header.value">${orgId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">empId</stringProp>
                <stringProp name="RegexExtractor.regex">{&quot;id&quot;:&quot;(.*)&quot;,&quot;firstName&quot;:&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// USED FOR NAME

var firstNames = [&apos;Michael Stark&apos;, &apos;Alicia Jolly&apos;, &apos;Thomas Peter&apos;, &apos;Olivia Stark&apos;, &apos;Daniel Singh&apos;, &apos;Candice Stark&apos;, &apos;Barbara Phoghat&apos;, &apos;Matthew Stark&apos;, &apos;Craig Patel&apos;,&apos;Tammy Stark&apos;,&apos;Heaven Jones&apos;,&apos;Floretta Katte&apos;,&apos;Sylvester Peter&apos;,&apos;Mandi Stark&apos;,&apos;Damion Modi&apos;,&apos;Jacklyn Jha&apos;,&apos;Taina Aggarwal&apos;,&apos;Myrtle Gupta&apos;,&apos;Ernest Pasricha&apos;,&apos;Dorsey Tina&apos;,&apos;Wilber Mehta&apos;,&apos;Lacie Kohli&apos;,&apos;Orena Yuvraj&apos;,&apos;Eliana Thakur&apos;,&apos;Marilyn Adhikari&apos;,&apos;Sharita Chaudhari&apos;,&apos;Rufina Pack&apos;,&apos;Isiah Adhikari&apos;,&apos;Lavenia Aggarwal&apos;,&apos;Coleman Adhikari&apos;,&apos;Donald Trump&apos;,&apos;Jannette Adhikari&apos;,&apos;Zaida Aggarwal&apos;,&apos;Darius Obama&apos;,&apos;Shelton Rana&apos;,&apos;Jackson Stephen&apos;,&apos;Rochelle Grey&apos;,&apos;Kermit Chaudhari&apos;,&apos;Branda&apos;,&apos;Casandra Peter&apos;,&apos;Lorna Chaudhari&apos;,&apos;Angela Peter&apos;,&apos;China India&apos;,&apos;Alena Goblin&apos;,&apos;Barrett Chaudhari&apos;,&apos;Aaron Singh&apos;,&apos;Jeffrey Sansa&apos;,&apos;Shane Kumar&apos;,&apos;Melinda Patel&apos;,&apos;Valencia Peter&apos;,&apos;Jacque Nicolus&apos;,&apos;Venessa&apos;,&apos;Harold&apos;,&apos;Charol Peter&apos;,&apos;Rebbecca Peter&apos;,&apos;Melissa&apos;,&apos;Diego Narula&apos;,&apos;Jorge Aggarwal&apos;,&apos;Katie Hanks&apos;,&apos;Denise Aggarwal&apos;,&apos;Lorita Eric&apos;,&apos;Anthony Peter&apos;,&apos;Debbie Aggarwal&apos;,&apos;Jason Nicolus&apos;,&apos;Kassie Sansa&apos;,&apos;Misty Nicolus&apos;,&apos;Misti Dianne&apos;,&apos;Lashay Tonia&apos;,&apos;Mariana Peter&apos;,&apos;Kevin Vickie&apos;,&apos;Magda Ralph&apos;,&apos;Maureen Aggarwal&apos;,&apos;Frederick Emmaline&apos;,&apos;Marylee Katelyn&apos;,&apos;Birdee Loren&apos;,&apos;Melvin Delbert&apos;,&apos;Mittie Clarence&apos;,&apos;Demetra Aggarwal&apos;,&apos;Nancy Vaughn&apos;,&apos;Arminda Garrett&apos;,&apos;Keith Trudy&apos;,&apos;Theresia Kelly&apos;];

//SYNTAX
 vars.put(&quot;randName&quot;,firstNames[Math.floor(Math.random() * firstNames.length)]);

// USED FOR Address
var address = [&apos;Savage&apos;, &apos;Stephens&apos;, &apos;Sparks&apos;, &apos;Stark&apos;, &apos;Sparks&apos;, &apos;Bottin&apos;, &apos;Jones&apos;, &apos;Arthurson&apos;, &apos;Harden&apos;, &apos;Gray&apos;, &apos;Bryson&apos;, &apos;Matthison&apos;, &apos;Wilson&apos;, &apos;Ivey&apos;, &apos;Netzley&apos;, &apos;Piche&apos;,&apos;Metz&apos;,&apos;Cass&apos;,&apos;Kuzma&apos;,&apos;Reno&apos;,&apos;Avis&apos;,&apos;Saville&apos;,&apos;Selvey&apos;,&apos;Stoecker&apos;,&apos;Auerbach&apos;,&apos;Eilerman&apos;,&apos;Holsey&apos;,&apos;Zepp&apos;,&apos;Davids&apos;,&apos;Foster&apos;,&apos;Sim&apos;,&apos;Messana&apos;,&apos;Schloss&apos;,&apos;Sylvester&apos;,&apos;Leathers&apos;,&apos;Niles&apos;,&apos;Combs&apos;,&apos;Phillips&apos;,&apos;Augsburger&apos;,&apos;Stroman&apos;,&apos;Beveridge&apos;,&apos;Gattis&apos;,&apos;Minnis&apos;,&apos;Fortes&apos;,&apos;Ullman&apos;,&apos;Bunkley&apos;,&apos;Spivey&apos;,&apos;Sterrett&apos;,&apos;Crist&apos;,&apos;Chow&apos;,&apos;Lierman&apos;,&apos;Ashalintubbi&apos;,&apos;Laura&apos;,&apos;Crawford&apos;,&apos;Balmer&apos;,&apos;Mcmullin&apos;,&apos;Dussault&apos;,&apos;Holbrook&apos;,&apos;Dion&apos;,&apos;Lechler&apos;,&apos;Beaton&apos;,&apos;Elzey&apos;,&apos;Sams&apos;,&apos;Irby&apos;,&apos;Hollaway&apos;,&apos;Levert&apos;,&apos;Gough&apos;,&apos;Croom&apos;,&apos;Dedman&apos;,&apos;Hatmaker&apos;,&apos;Tippetts&apos;,&apos;Odoms&apos;,&apos;Banaszak&apos;,&apos;Viveros&apos;,&apos;Hempstead&apos;,&apos;Tower&apos;,&apos;Atlas&apos;,&apos;Lozoya&apos;,&apos;Fulp&apos;,&apos;Corbo&apos;,&apos;Chapell&apos;,&apos;Monier&apos;,&apos;Selle&apos;,&apos;Parenti&apos;,&apos;Karl&apos;,&apos;Kuehn&apos;,&apos;Speers&apos;,&apos;Cambron&apos;,&apos;Blossom&apos;,&apos;Peart&apos;,&apos;Gunter&apos;,&apos;Hagenbuch&apos;,&apos;Amend&apos;,&apos;Tiernan&apos;,&apos;Ayala&apos;,&apos;Maclenn&apos;,&apos;Golden&apos;,&apos;Colone&apos;,&apos;Golding&apos;,&apos;Landreth&apos;,&apos;Shams&apos;,&apos;Liddle&apos;,&apos;Alley&apos;,&apos;Levy&apos;,&apos;Barajas&apos;,&apos;Tetrault&apos;,&apos;Shue&apos;,&apos;Lenton&apos;,&apos;Boss&apos;,&apos;Weedman&apos;,&apos;Bergeron&apos;,&apos;Valls&apos;,&apos;Pooler&apos;,&apos;Mollett&apos;,&apos;Viger&apos;,&apos;Donnellan&apos;,&apos;Dedeaux&apos;];
//SYNTAX
vars.put(&quot;address&quot;,address[Math.floor(Math.random() * address.length)]);
// USED FOR LastName
var lastName = [&apos;Savage&apos;, &apos;Stephens&apos;, &apos;Sparks&apos;, &apos;Stark&apos;, &apos;Sparks&apos;, &apos;Bottin&apos;, &apos;Jones&apos;, &apos;Arthurson&apos;, &apos;Harden&apos;, &apos;Gray&apos;, &apos;Bryson&apos;, &apos;Matthison&apos;, &apos;Wilson&apos;, &apos;Ivey&apos;, &apos;Netzley&apos;, &apos;Piche&apos;,&apos;Metz&apos;,&apos;Cass&apos;,&apos;Kuzma&apos;,&apos;Reno&apos;,&apos;Avis&apos;,&apos;Saville&apos;,&apos;Selvey&apos;,&apos;Stoecker&apos;,&apos;Auerbach&apos;,&apos;Eilerman&apos;,&apos;Holsey&apos;,&apos;Zepp&apos;,&apos;Davids&apos;,&apos;Foster&apos;,&apos;Sim&apos;,&apos;Messana&apos;,&apos;Schloss&apos;,&apos;Sylvester&apos;,&apos;Leathers&apos;,&apos;Niles&apos;,&apos;Combs&apos;,&apos;Phillips&apos;,&apos;Augsburger&apos;,&apos;Stroman&apos;,&apos;Beveridge&apos;,&apos;Gattis&apos;,&apos;Minnis&apos;,&apos;Fortes&apos;,&apos;Ullman&apos;,&apos;Bunkley&apos;,&apos;Spivey&apos;,&apos;Sterrett&apos;,&apos;Crist&apos;,&apos;Chow&apos;,&apos;Lierman&apos;,&apos;Ashalintubbi&apos;,&apos;Laura&apos;,&apos;Crawford&apos;,&apos;Balmer&apos;,&apos;Mcmullin&apos;,&apos;Dussault&apos;,&apos;Holbrook&apos;,&apos;Dion&apos;,&apos;Lechler&apos;,&apos;Beaton&apos;,&apos;Elzey&apos;,&apos;Sams&apos;,&apos;Irby&apos;,&apos;Hollaway&apos;,&apos;Levert&apos;,&apos;Gough&apos;,&apos;Croom&apos;,&apos;Dedman&apos;,&apos;Hatmaker&apos;,&apos;Tippetts&apos;,&apos;Odoms&apos;,&apos;Banaszak&apos;,&apos;Viveros&apos;,&apos;Hempstead&apos;,&apos;Tower&apos;,&apos;Atlas&apos;,&apos;Lozoya&apos;,&apos;Fulp&apos;,&apos;Corbo&apos;,&apos;Chapell&apos;,&apos;Monier&apos;,&apos;Selle&apos;,&apos;Parenti&apos;,&apos;Karl&apos;,&apos;Kuehn&apos;,&apos;Speers&apos;,&apos;Cambron&apos;,&apos;Blossom&apos;,&apos;Peart&apos;,&apos;Gunter&apos;,&apos;Hagenbuch&apos;,&apos;Amend&apos;,&apos;Tiernan&apos;,&apos;Ayala&apos;,&apos;Maclenn&apos;,&apos;Golden&apos;,&apos;Colone&apos;,&apos;Golding&apos;,&apos;Landreth&apos;,&apos;Shams&apos;,&apos;Liddle&apos;,&apos;Alley&apos;,&apos;Levy&apos;,&apos;Barajas&apos;,&apos;Tetrault&apos;,&apos;Shue&apos;,&apos;Lenton&apos;,&apos;Boss&apos;,&apos;Weedman&apos;,&apos;Bergeron&apos;,&apos;Valls&apos;,&apos;Pooler&apos;,&apos;Mollett&apos;,&apos;Viger&apos;,&apos;Donnellan&apos;,&apos;Dedeaux&apos;];
//SYNTAX
vars.put(&quot;lastName&quot;,lastName[Math.floor(Math.random() * lastName.length)]);

// USED FOR STATES
var states = [&apos;Alabama&apos;,&apos;Alaska&apos;,&apos;Arizona&apos;,&apos;Arkansas&apos;,&apos;California&apos;,&apos;Colorado&apos;,&apos;Connecticut&apos;,&apos;Delaware&apos;,&apos;Florida&apos;,&apos;Georgia&apos;,&apos;Hawaii&apos;,&apos;Idaho&apos;,&apos;Illinois&apos;,&apos;Indiana&apos;,&apos;Iowa&apos;,&apos;Kansas&apos;,&apos;Kentucky&apos;,&apos;Louisiana&apos;,&apos;Maine&apos;,&apos;Maryland&apos;,&apos;Massachusetts&apos;,&apos;Michigan&apos;,&apos;Minnesota&apos;,&apos;Mississippi&apos;,&apos;Missouri&apos;,&apos;Montana&apos;,&apos;Nebraska&apos;,&apos;Nevada&apos;,&apos;New Hampshire&apos;,&apos;New Jersey&apos;,&apos;New Mexico&apos;,&apos;New York&apos;,&apos;North Carolina&apos;,&apos;North Dakota&apos;,&apos;Ohio&apos;,&apos;Oklahoma&apos;,&apos;Oregon&apos;,&apos;Pennsylvania&apos;,&apos;Rhode Island&apos;,&apos;South Carolina&apos;,&apos;South Dakota&apos;,&apos;Tennessee&apos;,&apos;Texas&apos;,&apos;Utah&apos;,&apos;Vermont&apos;,&apos;Virginia&apos;,&apos;Washington&apos;,&apos;West Virginia&apos;,&apos;Wisconsin&apos;,&apos;Wyoming&apos;];
//SYNTAX
vars.put(&quot;randState&quot;,states[Math.floor(Math.random() * states.length)]);

// USED FOR STATE CODE

var scode=[&apos;AL&apos;,&apos;AK&apos;,&apos;AZ&apos;,&apos;AR&apos;,&apos;CA&apos;,&apos;CO&apos;,&apos;CT&apos;,&apos;DE&apos;,&apos;DC&apos;,&apos;FL&apos;,&apos;GA&apos;,&apos;HI&apos;,&apos;ID&apos;,&apos;IL&apos;,&apos;IN&apos;,&apos;IA&apos;,&apos;KS&apos;,&apos;KY&apos;,&apos;LA&apos;,&apos;ME&apos;,&apos;MD&apos;,&apos;MA&apos;,&apos;MI&apos;,&apos;MN&apos;,&apos;MS&apos;,&apos;MO&apos;,&apos;MT&apos;,&apos;NE&apos;,&apos;NV&apos;,&apos;NH&apos;,&apos;NJ&apos;,&apos;NM&apos;,&apos;NY&apos;,&apos;NC&apos;,&apos;ND&apos;,&apos;OH&apos;,&apos;OK&apos;,&apos;OR&apos;,&apos;PA&apos;,&apos;RI&apos;,&apos;SC&apos;,&apos;SD&apos;,&apos;TN&apos;,&apos;TX&apos;,&apos;UT&apos;,&apos;VT&apos;,&apos;VA&apos;,&apos;WA&apos;,&apos;WV&apos;,&apos;WI&apos;,&apos;WY&apos;]
//SYNTAX
vars.put(&quot;randStateCode&quot;,scode[Math.floor(Math.random() * scode.length)]);


// USED FOR LOCATION NAME

var locationName=[&apos;Franklin&apos;,&apos;Clinton&apos;,&apos;Clinton&apos;,&apos;Washington&apos;,&apos;Madison&apos;,&apos;Arlington&apos;,&apos;Franklin&apos;,&apos;Washington&apos;,&apos;Chester&apos;,&apos;Georgetown&apos;,&apos;Madison&apos;,&apos;Salem&apos;,&apos;Chester&apos;,&apos;Marion&apos;,&apos;Fairfield&apos;,&apos;Greenville&apos;,&apos;Kingston&apos;,&apos;Marion&apos;,&apos;Riverside&apos;,&apos;Springfield&apos;]

vars.put(&quot;randlocationName&quot;,locationName[Math.floor(Math.random() * locationName.length)]);


// USED FOR EMAIL
 var email=[&apos;hai.nguyen&apos;,&apos;josh.warrick&apos;,&apos;chris.jowett&apos;,&apos;mark.vanderlugt&apos;,&apos;luke.coleman&apos;,&apos;ohalushchak&apos;,&apos;timothy.werner&apos;,&apos;mike.milligan&apos;,&apos;esavrasov&apos;,&apos;srawat&apos;,&apos;avysotskaya&apos;,&apos;kdelehoidin&apos;];

//SYNTAX
vars.put(&quot;emailId&quot;,email[Math.floor(Math.random() * email.length)]);


// USED FOR CITY

var city=[&apos;New York&apos;,&apos;Philadelphia&apos;,&apos;Boston&apos;,&apos;Charleston&apos;,&apos;Baltimore&apos;,&apos;Northern Liberties&apos;,&apos;Salem&apos;,&apos;Newport&apos;,&apos;Providence&apos;,&apos;Marblehead&apos;,&apos;Southwark&apos;,&apos;Little Rock&apos;]

//Syntax

vars.put(&quot;city&quot;,city[Math.floor(Math.random() * city.length)]);

/*

// USED FOR TIME ZONE
var timezone=[&apos;US/Chicago&apos;,&apos;US/Denver&apos;,&apos;US/Phoenix&apos;,&apos;US/Los Angeles&apos;,&apos;US/Anchorage&apos;,&apos;US/Honolulu&apos;,&apos;US/Alabama&apos;,&apos;US/Florida&apos;,&apos;US/Georgia&apos;,&apos;US/Hawaii&apos;]

//Syntax
vars.put(&quot;timezone&quot;,timezone[Math.floor(Math.random() * timezone.length)]);

*/

vars.put(&quot;randZipCode&quot;,Math.floor(Math.random() * 90000) + 10000);
vars.put(&quot;randState&quot;,states[Math.floor(Math.random() * states.length)]);
vars.put(&quot;randPhoneNumber&quot;,Math.floor(Math.random() * 9000000000) + 1000000000);




</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">empEmail</stringProp>
                <stringProp name="RegexExtractor.regex">,&quot;email&quot;:&quot;(.*)&quot;,&quot;description&quot;:&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get_Employees" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/employee?page=0&amp;size=500</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get_Employee" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/employee/${empId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Merge_Employee_Not_Working" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;firstName&quot; : &quot;AAJohn&quot;,&#xd;
  &quot;lastName&quot; : &quot;AADoe&quot;,&#xd;
  &quot;birthDate&quot; : &quot;1988-08-08&quot;,&#xd;
  &quot;email&quot; : &quot;81john.doe@qa4life.com&quot;,&#xd;
  &quot;phone&quot; : {&#xd;
    &quot;number&quot; : &quot;8112345&quot;,&#xd;
    &quot;extension&quot; : &quot;38&quot;&#xd;
  },&#xd;
  &quot;active&quot; : false,&#xd;
  &quot;description&quot; : &quot;AAA Employee description&quot;,&#xd;
  &quot;addresses&quot; : [ {&#xd;
    &quot;address1&quot; : &quot;AR-107&quot;,&#xd;
    &quot;address2&quot; : &quot;Sherwood&quot;,&#xd;
    &quot;city&quot; : &quot;Little Rock&quot;,&#xd;
    &quot;state&quot; : &quot;AR&quot;,&#xd;
    &quot;country&quot; : &quot;USA&quot;,&#xd;
    &quot;zipCode&quot; : &quot;72120&quot;&#xd;
  } ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/employee/${empId}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Patch_Employee_Not_Working" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[ {&#xd;
  &quot;op&quot; : &quot;remove&quot;,&#xd;
  &quot;path&quot; : &quot;/description&quot;&#xd;
}, {&#xd;
  &quot;op&quot; : &quot;add&quot;,&#xd;
  &quot;path&quot; : &quot;/description&quot;,&#xd;
  &quot;value&quot; : &quot;Patched description&quot;&#xd;
}, {&#xd;
  &quot;op&quot; : &quot;replace&quot;,&#xd;
  &quot;path&quot; : &quot;/active&quot;,&#xd;
  &quot;value&quot; : false&#xd;
}, {&#xd;
  &quot;op&quot; : &quot;replace&quot;,&#xd;
  &quot;path&quot; : &quot;/addresses/0/address1&quot;,&#xd;
  &quot;value&quot; : &quot;AR-999&quot;&#xd;
}, {&#xd;
  &quot;op&quot; : &quot;test&quot;,&#xd;
  &quot;path&quot; : &quot;/email&quot;,&#xd;
  &quot;value&quot; : &quot;91john.doe@qa4life.com&quot;&#xd;
} ]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/employee/11e91a2f-2165-b7f8-954d-dfc5cdbae4e7</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Put_Employee" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;firstName&quot; : &quot;AAJohn&quot;,&#xd;
  &quot;lastName&quot; : &quot;AADoe&quot;,&#xd;
  &quot;birthDate&quot; : &quot;1988-08-08&quot;,&#xd;
  &quot;email&quot; : &quot;${__V(${emailId}_${__Random(1,10000,)}@qa4life.com)}&quot;,&#xd;
  &quot;phone&quot; : {&#xd;
    &quot;number&quot; : &quot;9812345&quot;,&#xd;
    &quot;extension&quot; : &quot;38&quot;&#xd;
  },&#xd;
  &quot;active&quot; : false,&#xd;
  &quot;description&quot; : &quot;AAA Employee description&quot;,&#xd;
  &quot;addresses&quot; : [ {&#xd;
    &quot;address1&quot; : &quot;AR-107&quot;,&#xd;
    &quot;address2&quot; : &quot;Sherwood&quot;,&#xd;
    &quot;city&quot; : &quot;Little Rock&quot;,&#xd;
    &quot;state&quot; : &quot;AR&quot;,&#xd;
    &quot;country&quot; : &quot;USA&quot;,&#xd;
    &quot;zipCode&quot; : &quot;72120&quot;&#xd;
  } ],&#xd;
  &quot;id&quot; : &quot;11e915ce-7519-5024-87d2-1970bc01d257&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/employee/${empId}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete_Employee" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/employee/${empId}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get_Removed_Employees" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/archive/employee?page=0&amp;size=500</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Undelete_Employee" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;status&quot; : &quot;active&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/archive/employee/${empId}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create_Employee_Photo" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;content&quot; : &quot;U2lnbmVkIHdpdGggYmxvb2Q=&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/employee/${empId}/photo</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">photoId</stringProp>
                <stringProp name="RegexExtractor.regex">{&quot;id&quot;:&quot;(.*)&quot;,&quot;firstName&quot;:&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// USED FOR NAME

var firstNames = [&apos;Michael Stark&apos;, &apos;Alicia Jolly&apos;, &apos;Thomas Peter&apos;, &apos;Olivia Stark&apos;, &apos;Daniel Singh&apos;, &apos;Candice Stark&apos;, &apos;Barbara Phoghat&apos;, &apos;Matthew Stark&apos;, &apos;Craig Patel&apos;,&apos;Tammy Stark&apos;,&apos;Heaven Jones&apos;,&apos;Floretta Katte&apos;,&apos;Sylvester Peter&apos;,&apos;Mandi Stark&apos;,&apos;Damion Modi&apos;,&apos;Jacklyn Jha&apos;,&apos;Taina Aggarwal&apos;,&apos;Myrtle Gupta&apos;,&apos;Ernest Pasricha&apos;,&apos;Dorsey Tina&apos;,&apos;Wilber Mehta&apos;,&apos;Lacie Kohli&apos;,&apos;Orena Yuvraj&apos;,&apos;Eliana Thakur&apos;,&apos;Marilyn Adhikari&apos;,&apos;Sharita Chaudhari&apos;,&apos;Rufina Pack&apos;,&apos;Isiah Adhikari&apos;,&apos;Lavenia Aggarwal&apos;,&apos;Coleman Adhikari&apos;,&apos;Donald Trump&apos;,&apos;Jannette Adhikari&apos;,&apos;Zaida Aggarwal&apos;,&apos;Darius Obama&apos;,&apos;Shelton Rana&apos;,&apos;Jackson Stephen&apos;,&apos;Rochelle Grey&apos;,&apos;Kermit Chaudhari&apos;,&apos;Branda&apos;,&apos;Casandra Peter&apos;,&apos;Lorna Chaudhari&apos;,&apos;Angela Peter&apos;,&apos;China India&apos;,&apos;Alena Goblin&apos;,&apos;Barrett Chaudhari&apos;,&apos;Aaron Singh&apos;,&apos;Jeffrey Sansa&apos;,&apos;Shane Kumar&apos;,&apos;Melinda Patel&apos;,&apos;Valencia Peter&apos;,&apos;Jacque Nicolus&apos;,&apos;Venessa&apos;,&apos;Harold&apos;,&apos;Charol Peter&apos;,&apos;Rebbecca Peter&apos;,&apos;Melissa&apos;,&apos;Diego Narula&apos;,&apos;Jorge Aggarwal&apos;,&apos;Katie Hanks&apos;,&apos;Denise Aggarwal&apos;,&apos;Lorita Eric&apos;,&apos;Anthony Peter&apos;,&apos;Debbie Aggarwal&apos;,&apos;Jason Nicolus&apos;,&apos;Kassie Sansa&apos;,&apos;Misty Nicolus&apos;,&apos;Misti Dianne&apos;,&apos;Lashay Tonia&apos;,&apos;Mariana Peter&apos;,&apos;Kevin Vickie&apos;,&apos;Magda Ralph&apos;,&apos;Maureen Aggarwal&apos;,&apos;Frederick Emmaline&apos;,&apos;Marylee Katelyn&apos;,&apos;Birdee Loren&apos;,&apos;Melvin Delbert&apos;,&apos;Mittie Clarence&apos;,&apos;Demetra Aggarwal&apos;,&apos;Nancy Vaughn&apos;,&apos;Arminda Garrett&apos;,&apos;Keith Trudy&apos;,&apos;Theresia Kelly&apos;];

//SYNTAX
 vars.put(&quot;randName&quot;,firstNames[Math.floor(Math.random() * firstNames.length)]);

// USED FOR Address
var address = [&apos;Savage&apos;, &apos;Stephens&apos;, &apos;Sparks&apos;, &apos;Stark&apos;, &apos;Sparks&apos;, &apos;Bottin&apos;, &apos;Jones&apos;, &apos;Arthurson&apos;, &apos;Harden&apos;, &apos;Gray&apos;, &apos;Bryson&apos;, &apos;Matthison&apos;, &apos;Wilson&apos;, &apos;Ivey&apos;, &apos;Netzley&apos;, &apos;Piche&apos;,&apos;Metz&apos;,&apos;Cass&apos;,&apos;Kuzma&apos;,&apos;Reno&apos;,&apos;Avis&apos;,&apos;Saville&apos;,&apos;Selvey&apos;,&apos;Stoecker&apos;,&apos;Auerbach&apos;,&apos;Eilerman&apos;,&apos;Holsey&apos;,&apos;Zepp&apos;,&apos;Davids&apos;,&apos;Foster&apos;,&apos;Sim&apos;,&apos;Messana&apos;,&apos;Schloss&apos;,&apos;Sylvester&apos;,&apos;Leathers&apos;,&apos;Niles&apos;,&apos;Combs&apos;,&apos;Phillips&apos;,&apos;Augsburger&apos;,&apos;Stroman&apos;,&apos;Beveridge&apos;,&apos;Gattis&apos;,&apos;Minnis&apos;,&apos;Fortes&apos;,&apos;Ullman&apos;,&apos;Bunkley&apos;,&apos;Spivey&apos;,&apos;Sterrett&apos;,&apos;Crist&apos;,&apos;Chow&apos;,&apos;Lierman&apos;,&apos;Ashalintubbi&apos;,&apos;Laura&apos;,&apos;Crawford&apos;,&apos;Balmer&apos;,&apos;Mcmullin&apos;,&apos;Dussault&apos;,&apos;Holbrook&apos;,&apos;Dion&apos;,&apos;Lechler&apos;,&apos;Beaton&apos;,&apos;Elzey&apos;,&apos;Sams&apos;,&apos;Irby&apos;,&apos;Hollaway&apos;,&apos;Levert&apos;,&apos;Gough&apos;,&apos;Croom&apos;,&apos;Dedman&apos;,&apos;Hatmaker&apos;,&apos;Tippetts&apos;,&apos;Odoms&apos;,&apos;Banaszak&apos;,&apos;Viveros&apos;,&apos;Hempstead&apos;,&apos;Tower&apos;,&apos;Atlas&apos;,&apos;Lozoya&apos;,&apos;Fulp&apos;,&apos;Corbo&apos;,&apos;Chapell&apos;,&apos;Monier&apos;,&apos;Selle&apos;,&apos;Parenti&apos;,&apos;Karl&apos;,&apos;Kuehn&apos;,&apos;Speers&apos;,&apos;Cambron&apos;,&apos;Blossom&apos;,&apos;Peart&apos;,&apos;Gunter&apos;,&apos;Hagenbuch&apos;,&apos;Amend&apos;,&apos;Tiernan&apos;,&apos;Ayala&apos;,&apos;Maclenn&apos;,&apos;Golden&apos;,&apos;Colone&apos;,&apos;Golding&apos;,&apos;Landreth&apos;,&apos;Shams&apos;,&apos;Liddle&apos;,&apos;Alley&apos;,&apos;Levy&apos;,&apos;Barajas&apos;,&apos;Tetrault&apos;,&apos;Shue&apos;,&apos;Lenton&apos;,&apos;Boss&apos;,&apos;Weedman&apos;,&apos;Bergeron&apos;,&apos;Valls&apos;,&apos;Pooler&apos;,&apos;Mollett&apos;,&apos;Viger&apos;,&apos;Donnellan&apos;,&apos;Dedeaux&apos;];
//SYNTAX
vars.put(&quot;address&quot;,address[Math.floor(Math.random() * address.length)]);
// USED FOR LastName
var lastName = [&apos;Savage&apos;, &apos;Stephens&apos;, &apos;Sparks&apos;, &apos;Stark&apos;, &apos;Sparks&apos;, &apos;Bottin&apos;, &apos;Jones&apos;, &apos;Arthurson&apos;, &apos;Harden&apos;, &apos;Gray&apos;, &apos;Bryson&apos;, &apos;Matthison&apos;, &apos;Wilson&apos;, &apos;Ivey&apos;, &apos;Netzley&apos;, &apos;Piche&apos;,&apos;Metz&apos;,&apos;Cass&apos;,&apos;Kuzma&apos;,&apos;Reno&apos;,&apos;Avis&apos;,&apos;Saville&apos;,&apos;Selvey&apos;,&apos;Stoecker&apos;,&apos;Auerbach&apos;,&apos;Eilerman&apos;,&apos;Holsey&apos;,&apos;Zepp&apos;,&apos;Davids&apos;,&apos;Foster&apos;,&apos;Sim&apos;,&apos;Messana&apos;,&apos;Schloss&apos;,&apos;Sylvester&apos;,&apos;Leathers&apos;,&apos;Niles&apos;,&apos;Combs&apos;,&apos;Phillips&apos;,&apos;Augsburger&apos;,&apos;Stroman&apos;,&apos;Beveridge&apos;,&apos;Gattis&apos;,&apos;Minnis&apos;,&apos;Fortes&apos;,&apos;Ullman&apos;,&apos;Bunkley&apos;,&apos;Spivey&apos;,&apos;Sterrett&apos;,&apos;Crist&apos;,&apos;Chow&apos;,&apos;Lierman&apos;,&apos;Ashalintubbi&apos;,&apos;Laura&apos;,&apos;Crawford&apos;,&apos;Balmer&apos;,&apos;Mcmullin&apos;,&apos;Dussault&apos;,&apos;Holbrook&apos;,&apos;Dion&apos;,&apos;Lechler&apos;,&apos;Beaton&apos;,&apos;Elzey&apos;,&apos;Sams&apos;,&apos;Irby&apos;,&apos;Hollaway&apos;,&apos;Levert&apos;,&apos;Gough&apos;,&apos;Croom&apos;,&apos;Dedman&apos;,&apos;Hatmaker&apos;,&apos;Tippetts&apos;,&apos;Odoms&apos;,&apos;Banaszak&apos;,&apos;Viveros&apos;,&apos;Hempstead&apos;,&apos;Tower&apos;,&apos;Atlas&apos;,&apos;Lozoya&apos;,&apos;Fulp&apos;,&apos;Corbo&apos;,&apos;Chapell&apos;,&apos;Monier&apos;,&apos;Selle&apos;,&apos;Parenti&apos;,&apos;Karl&apos;,&apos;Kuehn&apos;,&apos;Speers&apos;,&apos;Cambron&apos;,&apos;Blossom&apos;,&apos;Peart&apos;,&apos;Gunter&apos;,&apos;Hagenbuch&apos;,&apos;Amend&apos;,&apos;Tiernan&apos;,&apos;Ayala&apos;,&apos;Maclenn&apos;,&apos;Golden&apos;,&apos;Colone&apos;,&apos;Golding&apos;,&apos;Landreth&apos;,&apos;Shams&apos;,&apos;Liddle&apos;,&apos;Alley&apos;,&apos;Levy&apos;,&apos;Barajas&apos;,&apos;Tetrault&apos;,&apos;Shue&apos;,&apos;Lenton&apos;,&apos;Boss&apos;,&apos;Weedman&apos;,&apos;Bergeron&apos;,&apos;Valls&apos;,&apos;Pooler&apos;,&apos;Mollett&apos;,&apos;Viger&apos;,&apos;Donnellan&apos;,&apos;Dedeaux&apos;];
//SYNTAX
vars.put(&quot;lastName&quot;,lastName[Math.floor(Math.random() * lastName.length)]);

// USED FOR STATES
var states = [&apos;Alabama&apos;,&apos;Alaska&apos;,&apos;Arizona&apos;,&apos;Arkansas&apos;,&apos;California&apos;,&apos;Colorado&apos;,&apos;Connecticut&apos;,&apos;Delaware&apos;,&apos;Florida&apos;,&apos;Georgia&apos;,&apos;Hawaii&apos;,&apos;Idaho&apos;,&apos;Illinois&apos;,&apos;Indiana&apos;,&apos;Iowa&apos;,&apos;Kansas&apos;,&apos;Kentucky&apos;,&apos;Louisiana&apos;,&apos;Maine&apos;,&apos;Maryland&apos;,&apos;Massachusetts&apos;,&apos;Michigan&apos;,&apos;Minnesota&apos;,&apos;Mississippi&apos;,&apos;Missouri&apos;,&apos;Montana&apos;,&apos;Nebraska&apos;,&apos;Nevada&apos;,&apos;New Hampshire&apos;,&apos;New Jersey&apos;,&apos;New Mexico&apos;,&apos;New York&apos;,&apos;North Carolina&apos;,&apos;North Dakota&apos;,&apos;Ohio&apos;,&apos;Oklahoma&apos;,&apos;Oregon&apos;,&apos;Pennsylvania&apos;,&apos;Rhode Island&apos;,&apos;South Carolina&apos;,&apos;South Dakota&apos;,&apos;Tennessee&apos;,&apos;Texas&apos;,&apos;Utah&apos;,&apos;Vermont&apos;,&apos;Virginia&apos;,&apos;Washington&apos;,&apos;West Virginia&apos;,&apos;Wisconsin&apos;,&apos;Wyoming&apos;];
//SYNTAX
vars.put(&quot;randState&quot;,states[Math.floor(Math.random() * states.length)]);

// USED FOR STATE CODE

var scode=[&apos;AL&apos;,&apos;AK&apos;,&apos;AZ&apos;,&apos;AR&apos;,&apos;CA&apos;,&apos;CO&apos;,&apos;CT&apos;,&apos;DE&apos;,&apos;DC&apos;,&apos;FL&apos;,&apos;GA&apos;,&apos;HI&apos;,&apos;ID&apos;,&apos;IL&apos;,&apos;IN&apos;,&apos;IA&apos;,&apos;KS&apos;,&apos;KY&apos;,&apos;LA&apos;,&apos;ME&apos;,&apos;MD&apos;,&apos;MA&apos;,&apos;MI&apos;,&apos;MN&apos;,&apos;MS&apos;,&apos;MO&apos;,&apos;MT&apos;,&apos;NE&apos;,&apos;NV&apos;,&apos;NH&apos;,&apos;NJ&apos;,&apos;NM&apos;,&apos;NY&apos;,&apos;NC&apos;,&apos;ND&apos;,&apos;OH&apos;,&apos;OK&apos;,&apos;OR&apos;,&apos;PA&apos;,&apos;RI&apos;,&apos;SC&apos;,&apos;SD&apos;,&apos;TN&apos;,&apos;TX&apos;,&apos;UT&apos;,&apos;VT&apos;,&apos;VA&apos;,&apos;WA&apos;,&apos;WV&apos;,&apos;WI&apos;,&apos;WY&apos;]
//SYNTAX
vars.put(&quot;randStateCode&quot;,scode[Math.floor(Math.random() * scode.length)]);


// USED FOR LOCATION NAME

var locationName=[&apos;Franklin&apos;,&apos;Clinton&apos;,&apos;Clinton&apos;,&apos;Washington&apos;,&apos;Madison&apos;,&apos;Arlington&apos;,&apos;Franklin&apos;,&apos;Washington&apos;,&apos;Chester&apos;,&apos;Georgetown&apos;,&apos;Madison&apos;,&apos;Salem&apos;,&apos;Chester&apos;,&apos;Marion&apos;,&apos;Fairfield&apos;,&apos;Greenville&apos;,&apos;Kingston&apos;,&apos;Marion&apos;,&apos;Riverside&apos;,&apos;Springfield&apos;]

vars.put(&quot;randlocationName&quot;,locationName[Math.floor(Math.random() * locationName.length)]);


// USED FOR EMAIL
 var email=[&apos;hai.nguyen&apos;,&apos;josh.warrick&apos;,&apos;chris.jowett&apos;,&apos;mark.vanderlugt&apos;,&apos;luke.coleman&apos;,&apos;ohalushchak&apos;,&apos;timothy.werner&apos;,&apos;mike.milligan&apos;,&apos;esavrasov&apos;,&apos;srawat&apos;,&apos;avysotskaya&apos;,&apos;kdelehoidin&apos;];

//SYNTAX
vars.put(&quot;emailId&quot;,email[Math.floor(Math.random() * email.length)]);


// USED FOR CITY

var city=[&apos;New York&apos;,&apos;Philadelphia&apos;,&apos;Boston&apos;,&apos;Charleston&apos;,&apos;Baltimore&apos;,&apos;Northern Liberties&apos;,&apos;Salem&apos;,&apos;Newport&apos;,&apos;Providence&apos;,&apos;Marblehead&apos;,&apos;Southwark&apos;,&apos;Little Rock&apos;]

//Syntax

vars.put(&quot;city&quot;,city[Math.floor(Math.random() * city.length)]);

/*

// USED FOR TIME ZONE
var timezone=[&apos;US/Chicago&apos;,&apos;US/Denver&apos;,&apos;US/Phoenix&apos;,&apos;US/Los Angeles&apos;,&apos;US/Anchorage&apos;,&apos;US/Honolulu&apos;,&apos;US/Alabama&apos;,&apos;US/Florida&apos;,&apos;US/Georgia&apos;,&apos;US/Hawaii&apos;]

//Syntax
vars.put(&quot;timezone&quot;,timezone[Math.floor(Math.random() * timezone.length)]);

*/

vars.put(&quot;randZipCode&quot;,Math.floor(Math.random() * 90000) + 10000);
vars.put(&quot;randState&quot;,states[Math.floor(Math.random() * states.length)]);
vars.put(&quot;randPhoneNumber&quot;,Math.floor(Math.random() * 9000000000) + 1000000000);




</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get_Employee_By_Email_Not_Working" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/employee/${empEmail}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get_Employee_Photo" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/employee/${photoId}/photo</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update_Employee_Photo" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;content&quot; : &quot;U2lnbmVkIHdpdGgkjdrhfsjuesgfbdkjasbfgYmxvb2Q=&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/employee/${empId}/photo</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update_Employee_Access_Profile" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;accessLevel&quot; : 1,&#xd;
  &quot;accessPassword&quot; : &quot;superStrong&quot;,&#xd;
  &quot;locationAccessList&quot; : [ &quot;${locId}&quot; ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/employee/${empId}/access-profile</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get_Access_Profiles_For_Location" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/employee/location/${locId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get_Access_Profile" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/employee/${empId}/access-profile</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SP_Create_Member" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create_Member" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;firstName&quot; : &quot;John&quot;,&#xd;
  &quot;lastName&quot; : &quot;Doe&quot;,&#xd;
  &quot;middleInitial&quot; : &quot;S.&quot;,&#xd;
  &quot;birthDate&quot; : &quot;1977-07-07&quot;,&#xd;
  &quot;email&quot; : &quot;${__V(${emailId}_${__Random(1,10000,)}@qa4life.com)}&quot;,&#xd;
  &quot;phones&quot; : [ {&#xd;
    &quot;number&quot; : &quot;1123456&quot;,&#xd;
    &quot;phoneType&quot; : &quot;PRIMARY&quot;&#xd;
  } ],&#xd;
  &quot;waiverDocumentId&quot; : &quot;e2ed6924-f650-489d-9a1b-f6d7109353b7&quot;,&#xd;
  &quot;termsDocumentId&quot; : &quot;16e0f594-822c-46f0-84dc-6e1e0d7e985b&quot;,&#xd;
  &quot;digitalSignatureId&quot; : &quot;5804058d-1966-4d9f-8bc3-662781e2d25c&quot;,&#xd;
  &quot;healthNote&quot; : &quot;High BP&quot;,&#xd;
  &quot;locationId&quot; : &quot;${locId}&quot;,&#xd;
  &quot;addresses&quot; : [ {&#xd;
    &quot;address1&quot; : &quot;AR-107&quot;,&#xd;
    &quot;address2&quot; : &quot;Sherwood&quot;,&#xd;
    &quot;city&quot; : &quot;Little Rock&quot;,&#xd;
    &quot;state&quot; : &quot;AR&quot;,&#xd;
    &quot;country&quot; : &quot;USA&quot;,&#xd;
    &quot;zipCode&quot; : &quot;72120&quot;&#xd;
  } ],&#xd;
  &quot;employmentData&quot; : {&#xd;
    &quot;employer&quot; : &quot;Exadel&quot;,&#xd;
    &quot;occupation&quot; : &quot;programmer&quot;&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/member</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">memberId</stringProp>
                <stringProp name="RegexExtractor.regex">{&quot;id&quot;:&quot;(.*)&quot;,&quot;firstName&quot;:&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// USED FOR NAME

var firstNames = [&apos;Michael Stark&apos;, &apos;Alicia Jolly&apos;, &apos;Thomas Peter&apos;, &apos;Olivia Stark&apos;, &apos;Daniel Singh&apos;, &apos;Candice Stark&apos;, &apos;Barbara Phoghat&apos;, &apos;Matthew Stark&apos;, &apos;Craig Patel&apos;,&apos;Tammy Stark&apos;,&apos;Heaven Jones&apos;,&apos;Floretta Katte&apos;,&apos;Sylvester Peter&apos;,&apos;Mandi Stark&apos;,&apos;Damion Modi&apos;,&apos;Jacklyn Jha&apos;,&apos;Taina Aggarwal&apos;,&apos;Myrtle Gupta&apos;,&apos;Ernest Pasricha&apos;,&apos;Dorsey Tina&apos;,&apos;Wilber Mehta&apos;,&apos;Lacie Kohli&apos;,&apos;Orena Yuvraj&apos;,&apos;Eliana Thakur&apos;,&apos;Marilyn Adhikari&apos;,&apos;Sharita Chaudhari&apos;,&apos;Rufina Pack&apos;,&apos;Isiah Adhikari&apos;,&apos;Lavenia Aggarwal&apos;,&apos;Coleman Adhikari&apos;,&apos;Donald Trump&apos;,&apos;Jannette Adhikari&apos;,&apos;Zaida Aggarwal&apos;,&apos;Darius Obama&apos;,&apos;Shelton Rana&apos;,&apos;Jackson Stephen&apos;,&apos;Rochelle Grey&apos;,&apos;Kermit Chaudhari&apos;,&apos;Branda&apos;,&apos;Casandra Peter&apos;,&apos;Lorna Chaudhari&apos;,&apos;Angela Peter&apos;,&apos;China India&apos;,&apos;Alena Goblin&apos;,&apos;Barrett Chaudhari&apos;,&apos;Aaron Singh&apos;,&apos;Jeffrey Sansa&apos;,&apos;Shane Kumar&apos;,&apos;Melinda Patel&apos;,&apos;Valencia Peter&apos;,&apos;Jacque Nicolus&apos;,&apos;Venessa&apos;,&apos;Harold&apos;,&apos;Charol Peter&apos;,&apos;Rebbecca Peter&apos;,&apos;Melissa&apos;,&apos;Diego Narula&apos;,&apos;Jorge Aggarwal&apos;,&apos;Katie Hanks&apos;,&apos;Denise Aggarwal&apos;,&apos;Lorita Eric&apos;,&apos;Anthony Peter&apos;,&apos;Debbie Aggarwal&apos;,&apos;Jason Nicolus&apos;,&apos;Kassie Sansa&apos;,&apos;Misty Nicolus&apos;,&apos;Misti Dianne&apos;,&apos;Lashay Tonia&apos;,&apos;Mariana Peter&apos;,&apos;Kevin Vickie&apos;,&apos;Magda Ralph&apos;,&apos;Maureen Aggarwal&apos;,&apos;Frederick Emmaline&apos;,&apos;Marylee Katelyn&apos;,&apos;Birdee Loren&apos;,&apos;Melvin Delbert&apos;,&apos;Mittie Clarence&apos;,&apos;Demetra Aggarwal&apos;,&apos;Nancy Vaughn&apos;,&apos;Arminda Garrett&apos;,&apos;Keith Trudy&apos;,&apos;Theresia Kelly&apos;];

//SYNTAX
 vars.put(&quot;randName&quot;,firstNames[Math.floor(Math.random() * firstNames.length)]);

// USED FOR Address
var address = [&apos;Savage&apos;, &apos;Stephens&apos;, &apos;Sparks&apos;, &apos;Stark&apos;, &apos;Sparks&apos;, &apos;Bottin&apos;, &apos;Jones&apos;, &apos;Arthurson&apos;, &apos;Harden&apos;, &apos;Gray&apos;, &apos;Bryson&apos;, &apos;Matthison&apos;, &apos;Wilson&apos;, &apos;Ivey&apos;, &apos;Netzley&apos;, &apos;Piche&apos;,&apos;Metz&apos;,&apos;Cass&apos;,&apos;Kuzma&apos;,&apos;Reno&apos;,&apos;Avis&apos;,&apos;Saville&apos;,&apos;Selvey&apos;,&apos;Stoecker&apos;,&apos;Auerbach&apos;,&apos;Eilerman&apos;,&apos;Holsey&apos;,&apos;Zepp&apos;,&apos;Davids&apos;,&apos;Foster&apos;,&apos;Sim&apos;,&apos;Messana&apos;,&apos;Schloss&apos;,&apos;Sylvester&apos;,&apos;Leathers&apos;,&apos;Niles&apos;,&apos;Combs&apos;,&apos;Phillips&apos;,&apos;Augsburger&apos;,&apos;Stroman&apos;,&apos;Beveridge&apos;,&apos;Gattis&apos;,&apos;Minnis&apos;,&apos;Fortes&apos;,&apos;Ullman&apos;,&apos;Bunkley&apos;,&apos;Spivey&apos;,&apos;Sterrett&apos;,&apos;Crist&apos;,&apos;Chow&apos;,&apos;Lierman&apos;,&apos;Ashalintubbi&apos;,&apos;Laura&apos;,&apos;Crawford&apos;,&apos;Balmer&apos;,&apos;Mcmullin&apos;,&apos;Dussault&apos;,&apos;Holbrook&apos;,&apos;Dion&apos;,&apos;Lechler&apos;,&apos;Beaton&apos;,&apos;Elzey&apos;,&apos;Sams&apos;,&apos;Irby&apos;,&apos;Hollaway&apos;,&apos;Levert&apos;,&apos;Gough&apos;,&apos;Croom&apos;,&apos;Dedman&apos;,&apos;Hatmaker&apos;,&apos;Tippetts&apos;,&apos;Odoms&apos;,&apos;Banaszak&apos;,&apos;Viveros&apos;,&apos;Hempstead&apos;,&apos;Tower&apos;,&apos;Atlas&apos;,&apos;Lozoya&apos;,&apos;Fulp&apos;,&apos;Corbo&apos;,&apos;Chapell&apos;,&apos;Monier&apos;,&apos;Selle&apos;,&apos;Parenti&apos;,&apos;Karl&apos;,&apos;Kuehn&apos;,&apos;Speers&apos;,&apos;Cambron&apos;,&apos;Blossom&apos;,&apos;Peart&apos;,&apos;Gunter&apos;,&apos;Hagenbuch&apos;,&apos;Amend&apos;,&apos;Tiernan&apos;,&apos;Ayala&apos;,&apos;Maclenn&apos;,&apos;Golden&apos;,&apos;Colone&apos;,&apos;Golding&apos;,&apos;Landreth&apos;,&apos;Shams&apos;,&apos;Liddle&apos;,&apos;Alley&apos;,&apos;Levy&apos;,&apos;Barajas&apos;,&apos;Tetrault&apos;,&apos;Shue&apos;,&apos;Lenton&apos;,&apos;Boss&apos;,&apos;Weedman&apos;,&apos;Bergeron&apos;,&apos;Valls&apos;,&apos;Pooler&apos;,&apos;Mollett&apos;,&apos;Viger&apos;,&apos;Donnellan&apos;,&apos;Dedeaux&apos;];
//SYNTAX
vars.put(&quot;address&quot;,address[Math.floor(Math.random() * address.length)]);
// USED FOR LastName
var lastName = [&apos;Savage&apos;, &apos;Stephens&apos;, &apos;Sparks&apos;, &apos;Stark&apos;, &apos;Sparks&apos;, &apos;Bottin&apos;, &apos;Jones&apos;, &apos;Arthurson&apos;, &apos;Harden&apos;, &apos;Gray&apos;, &apos;Bryson&apos;, &apos;Matthison&apos;, &apos;Wilson&apos;, &apos;Ivey&apos;, &apos;Netzley&apos;, &apos;Piche&apos;,&apos;Metz&apos;,&apos;Cass&apos;,&apos;Kuzma&apos;,&apos;Reno&apos;,&apos;Avis&apos;,&apos;Saville&apos;,&apos;Selvey&apos;,&apos;Stoecker&apos;,&apos;Auerbach&apos;,&apos;Eilerman&apos;,&apos;Holsey&apos;,&apos;Zepp&apos;,&apos;Davids&apos;,&apos;Foster&apos;,&apos;Sim&apos;,&apos;Messana&apos;,&apos;Schloss&apos;,&apos;Sylvester&apos;,&apos;Leathers&apos;,&apos;Niles&apos;,&apos;Combs&apos;,&apos;Phillips&apos;,&apos;Augsburger&apos;,&apos;Stroman&apos;,&apos;Beveridge&apos;,&apos;Gattis&apos;,&apos;Minnis&apos;,&apos;Fortes&apos;,&apos;Ullman&apos;,&apos;Bunkley&apos;,&apos;Spivey&apos;,&apos;Sterrett&apos;,&apos;Crist&apos;,&apos;Chow&apos;,&apos;Lierman&apos;,&apos;Ashalintubbi&apos;,&apos;Laura&apos;,&apos;Crawford&apos;,&apos;Balmer&apos;,&apos;Mcmullin&apos;,&apos;Dussault&apos;,&apos;Holbrook&apos;,&apos;Dion&apos;,&apos;Lechler&apos;,&apos;Beaton&apos;,&apos;Elzey&apos;,&apos;Sams&apos;,&apos;Irby&apos;,&apos;Hollaway&apos;,&apos;Levert&apos;,&apos;Gough&apos;,&apos;Croom&apos;,&apos;Dedman&apos;,&apos;Hatmaker&apos;,&apos;Tippetts&apos;,&apos;Odoms&apos;,&apos;Banaszak&apos;,&apos;Viveros&apos;,&apos;Hempstead&apos;,&apos;Tower&apos;,&apos;Atlas&apos;,&apos;Lozoya&apos;,&apos;Fulp&apos;,&apos;Corbo&apos;,&apos;Chapell&apos;,&apos;Monier&apos;,&apos;Selle&apos;,&apos;Parenti&apos;,&apos;Karl&apos;,&apos;Kuehn&apos;,&apos;Speers&apos;,&apos;Cambron&apos;,&apos;Blossom&apos;,&apos;Peart&apos;,&apos;Gunter&apos;,&apos;Hagenbuch&apos;,&apos;Amend&apos;,&apos;Tiernan&apos;,&apos;Ayala&apos;,&apos;Maclenn&apos;,&apos;Golden&apos;,&apos;Colone&apos;,&apos;Golding&apos;,&apos;Landreth&apos;,&apos;Shams&apos;,&apos;Liddle&apos;,&apos;Alley&apos;,&apos;Levy&apos;,&apos;Barajas&apos;,&apos;Tetrault&apos;,&apos;Shue&apos;,&apos;Lenton&apos;,&apos;Boss&apos;,&apos;Weedman&apos;,&apos;Bergeron&apos;,&apos;Valls&apos;,&apos;Pooler&apos;,&apos;Mollett&apos;,&apos;Viger&apos;,&apos;Donnellan&apos;,&apos;Dedeaux&apos;];
//SYNTAX
vars.put(&quot;lastName&quot;,lastName[Math.floor(Math.random() * lastName.length)]);

// USED FOR STATES
var states = [&apos;Alabama&apos;,&apos;Alaska&apos;,&apos;Arizona&apos;,&apos;Arkansas&apos;,&apos;California&apos;,&apos;Colorado&apos;,&apos;Connecticut&apos;,&apos;Delaware&apos;,&apos;Florida&apos;,&apos;Georgia&apos;,&apos;Hawaii&apos;,&apos;Idaho&apos;,&apos;Illinois&apos;,&apos;Indiana&apos;,&apos;Iowa&apos;,&apos;Kansas&apos;,&apos;Kentucky&apos;,&apos;Louisiana&apos;,&apos;Maine&apos;,&apos;Maryland&apos;,&apos;Massachusetts&apos;,&apos;Michigan&apos;,&apos;Minnesota&apos;,&apos;Mississippi&apos;,&apos;Missouri&apos;,&apos;Montana&apos;,&apos;Nebraska&apos;,&apos;Nevada&apos;,&apos;New Hampshire&apos;,&apos;New Jersey&apos;,&apos;New Mexico&apos;,&apos;New York&apos;,&apos;North Carolina&apos;,&apos;North Dakota&apos;,&apos;Ohio&apos;,&apos;Oklahoma&apos;,&apos;Oregon&apos;,&apos;Pennsylvania&apos;,&apos;Rhode Island&apos;,&apos;South Carolina&apos;,&apos;South Dakota&apos;,&apos;Tennessee&apos;,&apos;Texas&apos;,&apos;Utah&apos;,&apos;Vermont&apos;,&apos;Virginia&apos;,&apos;Washington&apos;,&apos;West Virginia&apos;,&apos;Wisconsin&apos;,&apos;Wyoming&apos;];
//SYNTAX
vars.put(&quot;randState&quot;,states[Math.floor(Math.random() * states.length)]);

// USED FOR STATE CODE

var scode=[&apos;AL&apos;,&apos;AK&apos;,&apos;AZ&apos;,&apos;AR&apos;,&apos;CA&apos;,&apos;CO&apos;,&apos;CT&apos;,&apos;DE&apos;,&apos;DC&apos;,&apos;FL&apos;,&apos;GA&apos;,&apos;HI&apos;,&apos;ID&apos;,&apos;IL&apos;,&apos;IN&apos;,&apos;IA&apos;,&apos;KS&apos;,&apos;KY&apos;,&apos;LA&apos;,&apos;ME&apos;,&apos;MD&apos;,&apos;MA&apos;,&apos;MI&apos;,&apos;MN&apos;,&apos;MS&apos;,&apos;MO&apos;,&apos;MT&apos;,&apos;NE&apos;,&apos;NV&apos;,&apos;NH&apos;,&apos;NJ&apos;,&apos;NM&apos;,&apos;NY&apos;,&apos;NC&apos;,&apos;ND&apos;,&apos;OH&apos;,&apos;OK&apos;,&apos;OR&apos;,&apos;PA&apos;,&apos;RI&apos;,&apos;SC&apos;,&apos;SD&apos;,&apos;TN&apos;,&apos;TX&apos;,&apos;UT&apos;,&apos;VT&apos;,&apos;VA&apos;,&apos;WA&apos;,&apos;WV&apos;,&apos;WI&apos;,&apos;WY&apos;]
//SYNTAX
vars.put(&quot;randStateCode&quot;,scode[Math.floor(Math.random() * scode.length)]);


// USED FOR LOCATION NAME

var locationName=[&apos;Franklin&apos;,&apos;Clinton&apos;,&apos;Clinton&apos;,&apos;Washington&apos;,&apos;Madison&apos;,&apos;Arlington&apos;,&apos;Franklin&apos;,&apos;Washington&apos;,&apos;Chester&apos;,&apos;Georgetown&apos;,&apos;Madison&apos;,&apos;Salem&apos;,&apos;Chester&apos;,&apos;Marion&apos;,&apos;Fairfield&apos;,&apos;Greenville&apos;,&apos;Kingston&apos;,&apos;Marion&apos;,&apos;Riverside&apos;,&apos;Springfield&apos;]

vars.put(&quot;randlocationName&quot;,locationName[Math.floor(Math.random() * locationName.length)]);


// USED FOR EMAIL
 var email=[&apos;hai.nguyen&apos;,&apos;josh.warrick&apos;,&apos;chris.jowett&apos;,&apos;mark.vanderlugt&apos;,&apos;luke.coleman&apos;,&apos;ohalushchak&apos;,&apos;timothy.werner&apos;,&apos;mike.milligan&apos;,&apos;esavrasov&apos;,&apos;srawat&apos;,&apos;avysotskaya&apos;,&apos;kdelehoidin&apos;];

//SYNTAX
vars.put(&quot;emailId&quot;,email[Math.floor(Math.random() * email.length)]);


// USED FOR CITY

var city=[&apos;New York&apos;,&apos;Philadelphia&apos;,&apos;Boston&apos;,&apos;Charleston&apos;,&apos;Baltimore&apos;,&apos;Northern Liberties&apos;,&apos;Salem&apos;,&apos;Newport&apos;,&apos;Providence&apos;,&apos;Marblehead&apos;,&apos;Southwark&apos;,&apos;Little Rock&apos;]

//Syntax

vars.put(&quot;city&quot;,city[Math.floor(Math.random() * city.length)]);

/*

// USED FOR TIME ZONE
var timezone=[&apos;US/Chicago&apos;,&apos;US/Denver&apos;,&apos;US/Phoenix&apos;,&apos;US/Los Angeles&apos;,&apos;US/Anchorage&apos;,&apos;US/Honolulu&apos;,&apos;US/Alabama&apos;,&apos;US/Florida&apos;,&apos;US/Georgia&apos;,&apos;US/Hawaii&apos;]

//Syntax
vars.put(&quot;timezone&quot;,timezone[Math.floor(Math.random() * timezone.length)]);

*/

vars.put(&quot;randZipCode&quot;,Math.floor(Math.random() * 90000) + 10000);
vars.put(&quot;randState&quot;,states[Math.floor(Math.random() * states.length)]);
vars.put(&quot;randPhoneNumber&quot;,Math.floor(Math.random() * 9000000000) + 1000000000);




</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ABCFS-ORGANIZATION-ID</stringProp>
                    <stringProp name="Header.value">${orgId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get_Members" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/member</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get_Member" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/member/${memberId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Merge_Member_Not_Working" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;firstName&quot; : &quot;John2&quot;,&#xd;
  &quot;lastName&quot; : &quot;Doe2&quot;,&#xd;
  &quot;birthDate&quot; : &quot;1988-08-08&quot;,&#xd;
  &quot;email&quot; : &quot;81john.doe@qa4life.com&quot;,&#xd;
  &quot;phones&quot; : [ {&#xd;
    &quot;number&quot; : &quot;81123456&quot;,&#xd;
    &quot;phoneType&quot; : &quot;PRIMARY&quot;&#xd;
  } ],&#xd;
  &quot;waiverDocumentId&quot; : &quot;${__UUID()}&quot;,&#xd;
  &quot;termsDocumentId&quot; : &quot;${__UUID()}&quot;,&#xd;
  &quot;digitalSignatureId&quot; : &quot;${__UUID()}&quot;,&#xd;
  &quot;healthNote&quot; : &quot;High BP&quot;,&#xd;
  &quot;locationId&quot; : &quot;${locId}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/member/11e91a3b-3191-28e3-954d-dfc5cdbae4e7</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Patch_Member_Not_Working" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[ {&#xd;
  &quot;op&quot; : &quot;remove&quot;,&#xd;
  &quot;path&quot; : &quot;/healthNote&quot;&#xd;
}, {&#xd;
  &quot;op&quot; : &quot;add&quot;,&#xd;
  &quot;path&quot; : &quot;/healthNote&quot;,&#xd;
  &quot;value&quot; : &quot;new High BP&quot;&#xd;
}, {&#xd;
  &quot;op&quot; : &quot;test&quot;,&#xd;
  &quot;path&quot; : &quot;/lastName&quot;,&#xd;
  &quot;value&quot; : &quot;Doe&quot;&#xd;
} ]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/member/${memberId}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Put_Member" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;firstName&quot; : &quot;John2&quot;,&#xd;
  &quot;lastName&quot; : &quot;Doe2&quot;,&#xd;
  &quot;birthDate&quot; : &quot;1988-08-08&quot;,&#xd;
  &quot;email&quot; : &quot;${__V(${emailId}_${__Random(1,10000,)}@qa4life.com)}&quot;,&#xd;
  &quot;phones&quot; : [ {&#xd;
    &quot;number&quot; : &quot;98123456&quot;,&#xd;
    &quot;phoneType&quot; : &quot;PRIMARY&quot;&#xd;
  } ],&#xd;
  &quot;waiverDocumentId&quot; : &quot;b38c7a5b-2dd7-44bd-95fc-778c1ec82192&quot;,&#xd;
  &quot;termsDocumentId&quot; : &quot;84ef83d6-8988-45f3-a7d5-803c0ab20d1b&quot;,&#xd;
  &quot;digitalSignatureId&quot; : &quot;6e58003c-d303-49ad-b36a-ec8e00e8073c&quot;,&#xd;
  &quot;healthNote&quot; : &quot;High BP&quot;,&#xd;
  &quot;locationId&quot; : &quot;${locId}&quot;,&#xd;
  &quot;id&quot; : &quot;11e915ce-80e1-367f-87d2-1970bc01d257&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/member/${memberId}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete_Member" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/member/${memberId}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get_Removed_Members" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/archive/member?page=0&amp;size=500</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Undelete_Member" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;status&quot; : &quot;active&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/archive/member/${memberId}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create_Member_Photo" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;content&quot; : &quot;U2lnbmVkIHdpdGggYmxvb2Q=&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/member/${memberId}/photo</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">photoId</stringProp>
                <stringProp name="RegexExtractor.regex">{&quot;id&quot;:&quot;(.*)&quot;,&quot;firstName&quot;:&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// USED FOR NAME

var firstNames = [&apos;Michael Stark&apos;, &apos;Alicia Jolly&apos;, &apos;Thomas Peter&apos;, &apos;Olivia Stark&apos;, &apos;Daniel Singh&apos;, &apos;Candice Stark&apos;, &apos;Barbara Phoghat&apos;, &apos;Matthew Stark&apos;, &apos;Craig Patel&apos;,&apos;Tammy Stark&apos;,&apos;Heaven Jones&apos;,&apos;Floretta Katte&apos;,&apos;Sylvester Peter&apos;,&apos;Mandi Stark&apos;,&apos;Damion Modi&apos;,&apos;Jacklyn Jha&apos;,&apos;Taina Aggarwal&apos;,&apos;Myrtle Gupta&apos;,&apos;Ernest Pasricha&apos;,&apos;Dorsey Tina&apos;,&apos;Wilber Mehta&apos;,&apos;Lacie Kohli&apos;,&apos;Orena Yuvraj&apos;,&apos;Eliana Thakur&apos;,&apos;Marilyn Adhikari&apos;,&apos;Sharita Chaudhari&apos;,&apos;Rufina Pack&apos;,&apos;Isiah Adhikari&apos;,&apos;Lavenia Aggarwal&apos;,&apos;Coleman Adhikari&apos;,&apos;Donald Trump&apos;,&apos;Jannette Adhikari&apos;,&apos;Zaida Aggarwal&apos;,&apos;Darius Obama&apos;,&apos;Shelton Rana&apos;,&apos;Jackson Stephen&apos;,&apos;Rochelle Grey&apos;,&apos;Kermit Chaudhari&apos;,&apos;Branda&apos;,&apos;Casandra Peter&apos;,&apos;Lorna Chaudhari&apos;,&apos;Angela Peter&apos;,&apos;China India&apos;,&apos;Alena Goblin&apos;,&apos;Barrett Chaudhari&apos;,&apos;Aaron Singh&apos;,&apos;Jeffrey Sansa&apos;,&apos;Shane Kumar&apos;,&apos;Melinda Patel&apos;,&apos;Valencia Peter&apos;,&apos;Jacque Nicolus&apos;,&apos;Venessa&apos;,&apos;Harold&apos;,&apos;Charol Peter&apos;,&apos;Rebbecca Peter&apos;,&apos;Melissa&apos;,&apos;Diego Narula&apos;,&apos;Jorge Aggarwal&apos;,&apos;Katie Hanks&apos;,&apos;Denise Aggarwal&apos;,&apos;Lorita Eric&apos;,&apos;Anthony Peter&apos;,&apos;Debbie Aggarwal&apos;,&apos;Jason Nicolus&apos;,&apos;Kassie Sansa&apos;,&apos;Misty Nicolus&apos;,&apos;Misti Dianne&apos;,&apos;Lashay Tonia&apos;,&apos;Mariana Peter&apos;,&apos;Kevin Vickie&apos;,&apos;Magda Ralph&apos;,&apos;Maureen Aggarwal&apos;,&apos;Frederick Emmaline&apos;,&apos;Marylee Katelyn&apos;,&apos;Birdee Loren&apos;,&apos;Melvin Delbert&apos;,&apos;Mittie Clarence&apos;,&apos;Demetra Aggarwal&apos;,&apos;Nancy Vaughn&apos;,&apos;Arminda Garrett&apos;,&apos;Keith Trudy&apos;,&apos;Theresia Kelly&apos;];

//SYNTAX
 vars.put(&quot;randName&quot;,firstNames[Math.floor(Math.random() * firstNames.length)]);

// USED FOR Address
var address = [&apos;Savage&apos;, &apos;Stephens&apos;, &apos;Sparks&apos;, &apos;Stark&apos;, &apos;Sparks&apos;, &apos;Bottin&apos;, &apos;Jones&apos;, &apos;Arthurson&apos;, &apos;Harden&apos;, &apos;Gray&apos;, &apos;Bryson&apos;, &apos;Matthison&apos;, &apos;Wilson&apos;, &apos;Ivey&apos;, &apos;Netzley&apos;, &apos;Piche&apos;,&apos;Metz&apos;,&apos;Cass&apos;,&apos;Kuzma&apos;,&apos;Reno&apos;,&apos;Avis&apos;,&apos;Saville&apos;,&apos;Selvey&apos;,&apos;Stoecker&apos;,&apos;Auerbach&apos;,&apos;Eilerman&apos;,&apos;Holsey&apos;,&apos;Zepp&apos;,&apos;Davids&apos;,&apos;Foster&apos;,&apos;Sim&apos;,&apos;Messana&apos;,&apos;Schloss&apos;,&apos;Sylvester&apos;,&apos;Leathers&apos;,&apos;Niles&apos;,&apos;Combs&apos;,&apos;Phillips&apos;,&apos;Augsburger&apos;,&apos;Stroman&apos;,&apos;Beveridge&apos;,&apos;Gattis&apos;,&apos;Minnis&apos;,&apos;Fortes&apos;,&apos;Ullman&apos;,&apos;Bunkley&apos;,&apos;Spivey&apos;,&apos;Sterrett&apos;,&apos;Crist&apos;,&apos;Chow&apos;,&apos;Lierman&apos;,&apos;Ashalintubbi&apos;,&apos;Laura&apos;,&apos;Crawford&apos;,&apos;Balmer&apos;,&apos;Mcmullin&apos;,&apos;Dussault&apos;,&apos;Holbrook&apos;,&apos;Dion&apos;,&apos;Lechler&apos;,&apos;Beaton&apos;,&apos;Elzey&apos;,&apos;Sams&apos;,&apos;Irby&apos;,&apos;Hollaway&apos;,&apos;Levert&apos;,&apos;Gough&apos;,&apos;Croom&apos;,&apos;Dedman&apos;,&apos;Hatmaker&apos;,&apos;Tippetts&apos;,&apos;Odoms&apos;,&apos;Banaszak&apos;,&apos;Viveros&apos;,&apos;Hempstead&apos;,&apos;Tower&apos;,&apos;Atlas&apos;,&apos;Lozoya&apos;,&apos;Fulp&apos;,&apos;Corbo&apos;,&apos;Chapell&apos;,&apos;Monier&apos;,&apos;Selle&apos;,&apos;Parenti&apos;,&apos;Karl&apos;,&apos;Kuehn&apos;,&apos;Speers&apos;,&apos;Cambron&apos;,&apos;Blossom&apos;,&apos;Peart&apos;,&apos;Gunter&apos;,&apos;Hagenbuch&apos;,&apos;Amend&apos;,&apos;Tiernan&apos;,&apos;Ayala&apos;,&apos;Maclenn&apos;,&apos;Golden&apos;,&apos;Colone&apos;,&apos;Golding&apos;,&apos;Landreth&apos;,&apos;Shams&apos;,&apos;Liddle&apos;,&apos;Alley&apos;,&apos;Levy&apos;,&apos;Barajas&apos;,&apos;Tetrault&apos;,&apos;Shue&apos;,&apos;Lenton&apos;,&apos;Boss&apos;,&apos;Weedman&apos;,&apos;Bergeron&apos;,&apos;Valls&apos;,&apos;Pooler&apos;,&apos;Mollett&apos;,&apos;Viger&apos;,&apos;Donnellan&apos;,&apos;Dedeaux&apos;];
//SYNTAX
vars.put(&quot;address&quot;,address[Math.floor(Math.random() * address.length)]);
// USED FOR LastName
var lastName = [&apos;Savage&apos;, &apos;Stephens&apos;, &apos;Sparks&apos;, &apos;Stark&apos;, &apos;Sparks&apos;, &apos;Bottin&apos;, &apos;Jones&apos;, &apos;Arthurson&apos;, &apos;Harden&apos;, &apos;Gray&apos;, &apos;Bryson&apos;, &apos;Matthison&apos;, &apos;Wilson&apos;, &apos;Ivey&apos;, &apos;Netzley&apos;, &apos;Piche&apos;,&apos;Metz&apos;,&apos;Cass&apos;,&apos;Kuzma&apos;,&apos;Reno&apos;,&apos;Avis&apos;,&apos;Saville&apos;,&apos;Selvey&apos;,&apos;Stoecker&apos;,&apos;Auerbach&apos;,&apos;Eilerman&apos;,&apos;Holsey&apos;,&apos;Zepp&apos;,&apos;Davids&apos;,&apos;Foster&apos;,&apos;Sim&apos;,&apos;Messana&apos;,&apos;Schloss&apos;,&apos;Sylvester&apos;,&apos;Leathers&apos;,&apos;Niles&apos;,&apos;Combs&apos;,&apos;Phillips&apos;,&apos;Augsburger&apos;,&apos;Stroman&apos;,&apos;Beveridge&apos;,&apos;Gattis&apos;,&apos;Minnis&apos;,&apos;Fortes&apos;,&apos;Ullman&apos;,&apos;Bunkley&apos;,&apos;Spivey&apos;,&apos;Sterrett&apos;,&apos;Crist&apos;,&apos;Chow&apos;,&apos;Lierman&apos;,&apos;Ashalintubbi&apos;,&apos;Laura&apos;,&apos;Crawford&apos;,&apos;Balmer&apos;,&apos;Mcmullin&apos;,&apos;Dussault&apos;,&apos;Holbrook&apos;,&apos;Dion&apos;,&apos;Lechler&apos;,&apos;Beaton&apos;,&apos;Elzey&apos;,&apos;Sams&apos;,&apos;Irby&apos;,&apos;Hollaway&apos;,&apos;Levert&apos;,&apos;Gough&apos;,&apos;Croom&apos;,&apos;Dedman&apos;,&apos;Hatmaker&apos;,&apos;Tippetts&apos;,&apos;Odoms&apos;,&apos;Banaszak&apos;,&apos;Viveros&apos;,&apos;Hempstead&apos;,&apos;Tower&apos;,&apos;Atlas&apos;,&apos;Lozoya&apos;,&apos;Fulp&apos;,&apos;Corbo&apos;,&apos;Chapell&apos;,&apos;Monier&apos;,&apos;Selle&apos;,&apos;Parenti&apos;,&apos;Karl&apos;,&apos;Kuehn&apos;,&apos;Speers&apos;,&apos;Cambron&apos;,&apos;Blossom&apos;,&apos;Peart&apos;,&apos;Gunter&apos;,&apos;Hagenbuch&apos;,&apos;Amend&apos;,&apos;Tiernan&apos;,&apos;Ayala&apos;,&apos;Maclenn&apos;,&apos;Golden&apos;,&apos;Colone&apos;,&apos;Golding&apos;,&apos;Landreth&apos;,&apos;Shams&apos;,&apos;Liddle&apos;,&apos;Alley&apos;,&apos;Levy&apos;,&apos;Barajas&apos;,&apos;Tetrault&apos;,&apos;Shue&apos;,&apos;Lenton&apos;,&apos;Boss&apos;,&apos;Weedman&apos;,&apos;Bergeron&apos;,&apos;Valls&apos;,&apos;Pooler&apos;,&apos;Mollett&apos;,&apos;Viger&apos;,&apos;Donnellan&apos;,&apos;Dedeaux&apos;];
//SYNTAX
vars.put(&quot;lastName&quot;,lastName[Math.floor(Math.random() * lastName.length)]);

// USED FOR STATES
var states = [&apos;Alabama&apos;,&apos;Alaska&apos;,&apos;Arizona&apos;,&apos;Arkansas&apos;,&apos;California&apos;,&apos;Colorado&apos;,&apos;Connecticut&apos;,&apos;Delaware&apos;,&apos;Florida&apos;,&apos;Georgia&apos;,&apos;Hawaii&apos;,&apos;Idaho&apos;,&apos;Illinois&apos;,&apos;Indiana&apos;,&apos;Iowa&apos;,&apos;Kansas&apos;,&apos;Kentucky&apos;,&apos;Louisiana&apos;,&apos;Maine&apos;,&apos;Maryland&apos;,&apos;Massachusetts&apos;,&apos;Michigan&apos;,&apos;Minnesota&apos;,&apos;Mississippi&apos;,&apos;Missouri&apos;,&apos;Montana&apos;,&apos;Nebraska&apos;,&apos;Nevada&apos;,&apos;New Hampshire&apos;,&apos;New Jersey&apos;,&apos;New Mexico&apos;,&apos;New York&apos;,&apos;North Carolina&apos;,&apos;North Dakota&apos;,&apos;Ohio&apos;,&apos;Oklahoma&apos;,&apos;Oregon&apos;,&apos;Pennsylvania&apos;,&apos;Rhode Island&apos;,&apos;South Carolina&apos;,&apos;South Dakota&apos;,&apos;Tennessee&apos;,&apos;Texas&apos;,&apos;Utah&apos;,&apos;Vermont&apos;,&apos;Virginia&apos;,&apos;Washington&apos;,&apos;West Virginia&apos;,&apos;Wisconsin&apos;,&apos;Wyoming&apos;];
//SYNTAX
vars.put(&quot;randState&quot;,states[Math.floor(Math.random() * states.length)]);

// USED FOR STATE CODE

var scode=[&apos;AL&apos;,&apos;AK&apos;,&apos;AZ&apos;,&apos;AR&apos;,&apos;CA&apos;,&apos;CO&apos;,&apos;CT&apos;,&apos;DE&apos;,&apos;DC&apos;,&apos;FL&apos;,&apos;GA&apos;,&apos;HI&apos;,&apos;ID&apos;,&apos;IL&apos;,&apos;IN&apos;,&apos;IA&apos;,&apos;KS&apos;,&apos;KY&apos;,&apos;LA&apos;,&apos;ME&apos;,&apos;MD&apos;,&apos;MA&apos;,&apos;MI&apos;,&apos;MN&apos;,&apos;MS&apos;,&apos;MO&apos;,&apos;MT&apos;,&apos;NE&apos;,&apos;NV&apos;,&apos;NH&apos;,&apos;NJ&apos;,&apos;NM&apos;,&apos;NY&apos;,&apos;NC&apos;,&apos;ND&apos;,&apos;OH&apos;,&apos;OK&apos;,&apos;OR&apos;,&apos;PA&apos;,&apos;RI&apos;,&apos;SC&apos;,&apos;SD&apos;,&apos;TN&apos;,&apos;TX&apos;,&apos;UT&apos;,&apos;VT&apos;,&apos;VA&apos;,&apos;WA&apos;,&apos;WV&apos;,&apos;WI&apos;,&apos;WY&apos;]
//SYNTAX
vars.put(&quot;randStateCode&quot;,scode[Math.floor(Math.random() * scode.length)]);


// USED FOR LOCATION NAME

var locationName=[&apos;Franklin&apos;,&apos;Clinton&apos;,&apos;Clinton&apos;,&apos;Washington&apos;,&apos;Madison&apos;,&apos;Arlington&apos;,&apos;Franklin&apos;,&apos;Washington&apos;,&apos;Chester&apos;,&apos;Georgetown&apos;,&apos;Madison&apos;,&apos;Salem&apos;,&apos;Chester&apos;,&apos;Marion&apos;,&apos;Fairfield&apos;,&apos;Greenville&apos;,&apos;Kingston&apos;,&apos;Marion&apos;,&apos;Riverside&apos;,&apos;Springfield&apos;]

vars.put(&quot;randlocationName&quot;,locationName[Math.floor(Math.random() * locationName.length)]);


// USED FOR EMAIL
 var email=[&apos;hai.nguyen&apos;,&apos;josh.warrick&apos;,&apos;chris.jowett&apos;,&apos;mark.vanderlugt&apos;,&apos;luke.coleman&apos;,&apos;ohalushchak&apos;,&apos;timothy.werner&apos;,&apos;mike.milligan&apos;,&apos;esavrasov&apos;,&apos;srawat&apos;,&apos;avysotskaya&apos;,&apos;kdelehoidin&apos;];

//SYNTAX
vars.put(&quot;emailId&quot;,email[Math.floor(Math.random() * email.length)]);


// USED FOR CITY

var city=[&apos;New York&apos;,&apos;Philadelphia&apos;,&apos;Boston&apos;,&apos;Charleston&apos;,&apos;Baltimore&apos;,&apos;Northern Liberties&apos;,&apos;Salem&apos;,&apos;Newport&apos;,&apos;Providence&apos;,&apos;Marblehead&apos;,&apos;Southwark&apos;,&apos;Little Rock&apos;]

//Syntax

vars.put(&quot;city&quot;,city[Math.floor(Math.random() * city.length)]);

/*

// USED FOR TIME ZONE
var timezone=[&apos;US/Chicago&apos;,&apos;US/Denver&apos;,&apos;US/Phoenix&apos;,&apos;US/Los Angeles&apos;,&apos;US/Anchorage&apos;,&apos;US/Honolulu&apos;,&apos;US/Alabama&apos;,&apos;US/Florida&apos;,&apos;US/Georgia&apos;,&apos;US/Hawaii&apos;]

//Syntax
vars.put(&quot;timezone&quot;,timezone[Math.floor(Math.random() * timezone.length)]);

*/

vars.put(&quot;randZipCode&quot;,Math.floor(Math.random() * 90000) + 10000);
vars.put(&quot;randState&quot;,states[Math.floor(Math.random() * states.length)]);
vars.put(&quot;randPhoneNumber&quot;,Math.floor(Math.random() * 9000000000) + 1000000000);




</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get_Member_Photo" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/member/${memberId}/photo</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update_Member_Photo" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;content&quot; : &quot;U2lnbmVkIHdpdGgkjdrhfsjuesgfbdkjasbfgYmxvb2Q=&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/member/${memberId}/photo</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create_Member_Digital_Signature" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;termsDocumentId&quot; : &quot;9abe6c84-0ce1-4668-b265-1fb8d49c1a43&quot;,&#xd;
  &quot;signature&quot; : &quot;U2lnbmVkIHdpdGggYmxvb2Q=&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/member/${memberId}/digital-signature</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">digiSignId</stringProp>
                <stringProp name="RegexExtractor.regex">{&quot;id&quot;:&quot;(.*)&quot;,&quot;firstName&quot;:&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// USED FOR NAME

var firstNames = [&apos;Michael Stark&apos;, &apos;Alicia Jolly&apos;, &apos;Thomas Peter&apos;, &apos;Olivia Stark&apos;, &apos;Daniel Singh&apos;, &apos;Candice Stark&apos;, &apos;Barbara Phoghat&apos;, &apos;Matthew Stark&apos;, &apos;Craig Patel&apos;,&apos;Tammy Stark&apos;,&apos;Heaven Jones&apos;,&apos;Floretta Katte&apos;,&apos;Sylvester Peter&apos;,&apos;Mandi Stark&apos;,&apos;Damion Modi&apos;,&apos;Jacklyn Jha&apos;,&apos;Taina Aggarwal&apos;,&apos;Myrtle Gupta&apos;,&apos;Ernest Pasricha&apos;,&apos;Dorsey Tina&apos;,&apos;Wilber Mehta&apos;,&apos;Lacie Kohli&apos;,&apos;Orena Yuvraj&apos;,&apos;Eliana Thakur&apos;,&apos;Marilyn Adhikari&apos;,&apos;Sharita Chaudhari&apos;,&apos;Rufina Pack&apos;,&apos;Isiah Adhikari&apos;,&apos;Lavenia Aggarwal&apos;,&apos;Coleman Adhikari&apos;,&apos;Donald Trump&apos;,&apos;Jannette Adhikari&apos;,&apos;Zaida Aggarwal&apos;,&apos;Darius Obama&apos;,&apos;Shelton Rana&apos;,&apos;Jackson Stephen&apos;,&apos;Rochelle Grey&apos;,&apos;Kermit Chaudhari&apos;,&apos;Branda&apos;,&apos;Casandra Peter&apos;,&apos;Lorna Chaudhari&apos;,&apos;Angela Peter&apos;,&apos;China India&apos;,&apos;Alena Goblin&apos;,&apos;Barrett Chaudhari&apos;,&apos;Aaron Singh&apos;,&apos;Jeffrey Sansa&apos;,&apos;Shane Kumar&apos;,&apos;Melinda Patel&apos;,&apos;Valencia Peter&apos;,&apos;Jacque Nicolus&apos;,&apos;Venessa&apos;,&apos;Harold&apos;,&apos;Charol Peter&apos;,&apos;Rebbecca Peter&apos;,&apos;Melissa&apos;,&apos;Diego Narula&apos;,&apos;Jorge Aggarwal&apos;,&apos;Katie Hanks&apos;,&apos;Denise Aggarwal&apos;,&apos;Lorita Eric&apos;,&apos;Anthony Peter&apos;,&apos;Debbie Aggarwal&apos;,&apos;Jason Nicolus&apos;,&apos;Kassie Sansa&apos;,&apos;Misty Nicolus&apos;,&apos;Misti Dianne&apos;,&apos;Lashay Tonia&apos;,&apos;Mariana Peter&apos;,&apos;Kevin Vickie&apos;,&apos;Magda Ralph&apos;,&apos;Maureen Aggarwal&apos;,&apos;Frederick Emmaline&apos;,&apos;Marylee Katelyn&apos;,&apos;Birdee Loren&apos;,&apos;Melvin Delbert&apos;,&apos;Mittie Clarence&apos;,&apos;Demetra Aggarwal&apos;,&apos;Nancy Vaughn&apos;,&apos;Arminda Garrett&apos;,&apos;Keith Trudy&apos;,&apos;Theresia Kelly&apos;];

//SYNTAX
 vars.put(&quot;randName&quot;,firstNames[Math.floor(Math.random() * firstNames.length)]);

// USED FOR Address
var address = [&apos;Savage&apos;, &apos;Stephens&apos;, &apos;Sparks&apos;, &apos;Stark&apos;, &apos;Sparks&apos;, &apos;Bottin&apos;, &apos;Jones&apos;, &apos;Arthurson&apos;, &apos;Harden&apos;, &apos;Gray&apos;, &apos;Bryson&apos;, &apos;Matthison&apos;, &apos;Wilson&apos;, &apos;Ivey&apos;, &apos;Netzley&apos;, &apos;Piche&apos;,&apos;Metz&apos;,&apos;Cass&apos;,&apos;Kuzma&apos;,&apos;Reno&apos;,&apos;Avis&apos;,&apos;Saville&apos;,&apos;Selvey&apos;,&apos;Stoecker&apos;,&apos;Auerbach&apos;,&apos;Eilerman&apos;,&apos;Holsey&apos;,&apos;Zepp&apos;,&apos;Davids&apos;,&apos;Foster&apos;,&apos;Sim&apos;,&apos;Messana&apos;,&apos;Schloss&apos;,&apos;Sylvester&apos;,&apos;Leathers&apos;,&apos;Niles&apos;,&apos;Combs&apos;,&apos;Phillips&apos;,&apos;Augsburger&apos;,&apos;Stroman&apos;,&apos;Beveridge&apos;,&apos;Gattis&apos;,&apos;Minnis&apos;,&apos;Fortes&apos;,&apos;Ullman&apos;,&apos;Bunkley&apos;,&apos;Spivey&apos;,&apos;Sterrett&apos;,&apos;Crist&apos;,&apos;Chow&apos;,&apos;Lierman&apos;,&apos;Ashalintubbi&apos;,&apos;Laura&apos;,&apos;Crawford&apos;,&apos;Balmer&apos;,&apos;Mcmullin&apos;,&apos;Dussault&apos;,&apos;Holbrook&apos;,&apos;Dion&apos;,&apos;Lechler&apos;,&apos;Beaton&apos;,&apos;Elzey&apos;,&apos;Sams&apos;,&apos;Irby&apos;,&apos;Hollaway&apos;,&apos;Levert&apos;,&apos;Gough&apos;,&apos;Croom&apos;,&apos;Dedman&apos;,&apos;Hatmaker&apos;,&apos;Tippetts&apos;,&apos;Odoms&apos;,&apos;Banaszak&apos;,&apos;Viveros&apos;,&apos;Hempstead&apos;,&apos;Tower&apos;,&apos;Atlas&apos;,&apos;Lozoya&apos;,&apos;Fulp&apos;,&apos;Corbo&apos;,&apos;Chapell&apos;,&apos;Monier&apos;,&apos;Selle&apos;,&apos;Parenti&apos;,&apos;Karl&apos;,&apos;Kuehn&apos;,&apos;Speers&apos;,&apos;Cambron&apos;,&apos;Blossom&apos;,&apos;Peart&apos;,&apos;Gunter&apos;,&apos;Hagenbuch&apos;,&apos;Amend&apos;,&apos;Tiernan&apos;,&apos;Ayala&apos;,&apos;Maclenn&apos;,&apos;Golden&apos;,&apos;Colone&apos;,&apos;Golding&apos;,&apos;Landreth&apos;,&apos;Shams&apos;,&apos;Liddle&apos;,&apos;Alley&apos;,&apos;Levy&apos;,&apos;Barajas&apos;,&apos;Tetrault&apos;,&apos;Shue&apos;,&apos;Lenton&apos;,&apos;Boss&apos;,&apos;Weedman&apos;,&apos;Bergeron&apos;,&apos;Valls&apos;,&apos;Pooler&apos;,&apos;Mollett&apos;,&apos;Viger&apos;,&apos;Donnellan&apos;,&apos;Dedeaux&apos;];
//SYNTAX
vars.put(&quot;address&quot;,address[Math.floor(Math.random() * address.length)]);
// USED FOR LastName
var lastName = [&apos;Savage&apos;, &apos;Stephens&apos;, &apos;Sparks&apos;, &apos;Stark&apos;, &apos;Sparks&apos;, &apos;Bottin&apos;, &apos;Jones&apos;, &apos;Arthurson&apos;, &apos;Harden&apos;, &apos;Gray&apos;, &apos;Bryson&apos;, &apos;Matthison&apos;, &apos;Wilson&apos;, &apos;Ivey&apos;, &apos;Netzley&apos;, &apos;Piche&apos;,&apos;Metz&apos;,&apos;Cass&apos;,&apos;Kuzma&apos;,&apos;Reno&apos;,&apos;Avis&apos;,&apos;Saville&apos;,&apos;Selvey&apos;,&apos;Stoecker&apos;,&apos;Auerbach&apos;,&apos;Eilerman&apos;,&apos;Holsey&apos;,&apos;Zepp&apos;,&apos;Davids&apos;,&apos;Foster&apos;,&apos;Sim&apos;,&apos;Messana&apos;,&apos;Schloss&apos;,&apos;Sylvester&apos;,&apos;Leathers&apos;,&apos;Niles&apos;,&apos;Combs&apos;,&apos;Phillips&apos;,&apos;Augsburger&apos;,&apos;Stroman&apos;,&apos;Beveridge&apos;,&apos;Gattis&apos;,&apos;Minnis&apos;,&apos;Fortes&apos;,&apos;Ullman&apos;,&apos;Bunkley&apos;,&apos;Spivey&apos;,&apos;Sterrett&apos;,&apos;Crist&apos;,&apos;Chow&apos;,&apos;Lierman&apos;,&apos;Ashalintubbi&apos;,&apos;Laura&apos;,&apos;Crawford&apos;,&apos;Balmer&apos;,&apos;Mcmullin&apos;,&apos;Dussault&apos;,&apos;Holbrook&apos;,&apos;Dion&apos;,&apos;Lechler&apos;,&apos;Beaton&apos;,&apos;Elzey&apos;,&apos;Sams&apos;,&apos;Irby&apos;,&apos;Hollaway&apos;,&apos;Levert&apos;,&apos;Gough&apos;,&apos;Croom&apos;,&apos;Dedman&apos;,&apos;Hatmaker&apos;,&apos;Tippetts&apos;,&apos;Odoms&apos;,&apos;Banaszak&apos;,&apos;Viveros&apos;,&apos;Hempstead&apos;,&apos;Tower&apos;,&apos;Atlas&apos;,&apos;Lozoya&apos;,&apos;Fulp&apos;,&apos;Corbo&apos;,&apos;Chapell&apos;,&apos;Monier&apos;,&apos;Selle&apos;,&apos;Parenti&apos;,&apos;Karl&apos;,&apos;Kuehn&apos;,&apos;Speers&apos;,&apos;Cambron&apos;,&apos;Blossom&apos;,&apos;Peart&apos;,&apos;Gunter&apos;,&apos;Hagenbuch&apos;,&apos;Amend&apos;,&apos;Tiernan&apos;,&apos;Ayala&apos;,&apos;Maclenn&apos;,&apos;Golden&apos;,&apos;Colone&apos;,&apos;Golding&apos;,&apos;Landreth&apos;,&apos;Shams&apos;,&apos;Liddle&apos;,&apos;Alley&apos;,&apos;Levy&apos;,&apos;Barajas&apos;,&apos;Tetrault&apos;,&apos;Shue&apos;,&apos;Lenton&apos;,&apos;Boss&apos;,&apos;Weedman&apos;,&apos;Bergeron&apos;,&apos;Valls&apos;,&apos;Pooler&apos;,&apos;Mollett&apos;,&apos;Viger&apos;,&apos;Donnellan&apos;,&apos;Dedeaux&apos;];
//SYNTAX
vars.put(&quot;lastName&quot;,lastName[Math.floor(Math.random() * lastName.length)]);

// USED FOR STATES
var states = [&apos;Alabama&apos;,&apos;Alaska&apos;,&apos;Arizona&apos;,&apos;Arkansas&apos;,&apos;California&apos;,&apos;Colorado&apos;,&apos;Connecticut&apos;,&apos;Delaware&apos;,&apos;Florida&apos;,&apos;Georgia&apos;,&apos;Hawaii&apos;,&apos;Idaho&apos;,&apos;Illinois&apos;,&apos;Indiana&apos;,&apos;Iowa&apos;,&apos;Kansas&apos;,&apos;Kentucky&apos;,&apos;Louisiana&apos;,&apos;Maine&apos;,&apos;Maryland&apos;,&apos;Massachusetts&apos;,&apos;Michigan&apos;,&apos;Minnesota&apos;,&apos;Mississippi&apos;,&apos;Missouri&apos;,&apos;Montana&apos;,&apos;Nebraska&apos;,&apos;Nevada&apos;,&apos;New Hampshire&apos;,&apos;New Jersey&apos;,&apos;New Mexico&apos;,&apos;New York&apos;,&apos;North Carolina&apos;,&apos;North Dakota&apos;,&apos;Ohio&apos;,&apos;Oklahoma&apos;,&apos;Oregon&apos;,&apos;Pennsylvania&apos;,&apos;Rhode Island&apos;,&apos;South Carolina&apos;,&apos;South Dakota&apos;,&apos;Tennessee&apos;,&apos;Texas&apos;,&apos;Utah&apos;,&apos;Vermont&apos;,&apos;Virginia&apos;,&apos;Washington&apos;,&apos;West Virginia&apos;,&apos;Wisconsin&apos;,&apos;Wyoming&apos;];
//SYNTAX
vars.put(&quot;randState&quot;,states[Math.floor(Math.random() * states.length)]);

// USED FOR STATE CODE

var scode=[&apos;AL&apos;,&apos;AK&apos;,&apos;AZ&apos;,&apos;AR&apos;,&apos;CA&apos;,&apos;CO&apos;,&apos;CT&apos;,&apos;DE&apos;,&apos;DC&apos;,&apos;FL&apos;,&apos;GA&apos;,&apos;HI&apos;,&apos;ID&apos;,&apos;IL&apos;,&apos;IN&apos;,&apos;IA&apos;,&apos;KS&apos;,&apos;KY&apos;,&apos;LA&apos;,&apos;ME&apos;,&apos;MD&apos;,&apos;MA&apos;,&apos;MI&apos;,&apos;MN&apos;,&apos;MS&apos;,&apos;MO&apos;,&apos;MT&apos;,&apos;NE&apos;,&apos;NV&apos;,&apos;NH&apos;,&apos;NJ&apos;,&apos;NM&apos;,&apos;NY&apos;,&apos;NC&apos;,&apos;ND&apos;,&apos;OH&apos;,&apos;OK&apos;,&apos;OR&apos;,&apos;PA&apos;,&apos;RI&apos;,&apos;SC&apos;,&apos;SD&apos;,&apos;TN&apos;,&apos;TX&apos;,&apos;UT&apos;,&apos;VT&apos;,&apos;VA&apos;,&apos;WA&apos;,&apos;WV&apos;,&apos;WI&apos;,&apos;WY&apos;]
//SYNTAX
vars.put(&quot;randStateCode&quot;,scode[Math.floor(Math.random() * scode.length)]);


// USED FOR LOCATION NAME

var locationName=[&apos;Franklin&apos;,&apos;Clinton&apos;,&apos;Clinton&apos;,&apos;Washington&apos;,&apos;Madison&apos;,&apos;Arlington&apos;,&apos;Franklin&apos;,&apos;Washington&apos;,&apos;Chester&apos;,&apos;Georgetown&apos;,&apos;Madison&apos;,&apos;Salem&apos;,&apos;Chester&apos;,&apos;Marion&apos;,&apos;Fairfield&apos;,&apos;Greenville&apos;,&apos;Kingston&apos;,&apos;Marion&apos;,&apos;Riverside&apos;,&apos;Springfield&apos;]

vars.put(&quot;randlocationName&quot;,locationName[Math.floor(Math.random() * locationName.length)]);


// USED FOR EMAIL
 var email=[&apos;hai.nguyen&apos;,&apos;josh.warrick&apos;,&apos;chris.jowett&apos;,&apos;mark.vanderlugt&apos;,&apos;luke.coleman&apos;,&apos;ohalushchak&apos;,&apos;timothy.werner&apos;,&apos;mike.milligan&apos;,&apos;esavrasov&apos;,&apos;srawat&apos;,&apos;avysotskaya&apos;,&apos;kdelehoidin&apos;];

//SYNTAX
vars.put(&quot;emailId&quot;,email[Math.floor(Math.random() * email.length)]);


// USED FOR CITY

var city=[&apos;New York&apos;,&apos;Philadelphia&apos;,&apos;Boston&apos;,&apos;Charleston&apos;,&apos;Baltimore&apos;,&apos;Northern Liberties&apos;,&apos;Salem&apos;,&apos;Newport&apos;,&apos;Providence&apos;,&apos;Marblehead&apos;,&apos;Southwark&apos;,&apos;Little Rock&apos;]

//Syntax

vars.put(&quot;city&quot;,city[Math.floor(Math.random() * city.length)]);

/*

// USED FOR TIME ZONE
var timezone=[&apos;US/Chicago&apos;,&apos;US/Denver&apos;,&apos;US/Phoenix&apos;,&apos;US/Los Angeles&apos;,&apos;US/Anchorage&apos;,&apos;US/Honolulu&apos;,&apos;US/Alabama&apos;,&apos;US/Florida&apos;,&apos;US/Georgia&apos;,&apos;US/Hawaii&apos;]

//Syntax
vars.put(&quot;timezone&quot;,timezone[Math.floor(Math.random() * timezone.length)]);

*/

vars.put(&quot;randZipCode&quot;,Math.floor(Math.random() * 90000) + 10000);
vars.put(&quot;randState&quot;,states[Math.floor(Math.random() * states.length)]);
vars.put(&quot;randPhoneNumber&quot;,Math.floor(Math.random() * 9000000000) + 1000000000);




</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SP_Create_Developer" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create_Developer" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;id&quot; : &quot;11e915ce-6ee7-28b2-87d2-1970bc01d257&quot;,&#xd;
  &quot;firstName&quot; : &quot;John&quot;,&#xd;
  &quot;lastName&quot; : &quot;Doe&quot;,&#xd;
  &quot;email&quot; : &quot;1john.doe@qa4life.com&quot;,&#xd;
  &quot;locationId&quot; : &quot;${locId}&quot;,&#xd;
  &quot;phone&quot; : {&#xd;
    &quot;number&quot; : 1123456,&#xd;
    &quot;extension&quot; : &quot;38&quot;&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/developer</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">developerId</stringProp>
                <stringProp name="RegexExtractor.regex">{&quot;id&quot;:&quot;(.*)&quot;,&quot;firstName&quot;:&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// USED FOR NAME

var firstNames = [&apos;Michael Stark&apos;, &apos;Alicia Jolly&apos;, &apos;Thomas Peter&apos;, &apos;Olivia Stark&apos;, &apos;Daniel Singh&apos;, &apos;Candice Stark&apos;, &apos;Barbara Phoghat&apos;, &apos;Matthew Stark&apos;, &apos;Craig Patel&apos;,&apos;Tammy Stark&apos;,&apos;Heaven Jones&apos;,&apos;Floretta Katte&apos;,&apos;Sylvester Peter&apos;,&apos;Mandi Stark&apos;,&apos;Damion Modi&apos;,&apos;Jacklyn Jha&apos;,&apos;Taina Aggarwal&apos;,&apos;Myrtle Gupta&apos;,&apos;Ernest Pasricha&apos;,&apos;Dorsey Tina&apos;,&apos;Wilber Mehta&apos;,&apos;Lacie Kohli&apos;,&apos;Orena Yuvraj&apos;,&apos;Eliana Thakur&apos;,&apos;Marilyn Adhikari&apos;,&apos;Sharita Chaudhari&apos;,&apos;Rufina Pack&apos;,&apos;Isiah Adhikari&apos;,&apos;Lavenia Aggarwal&apos;,&apos;Coleman Adhikari&apos;,&apos;Donald Trump&apos;,&apos;Jannette Adhikari&apos;,&apos;Zaida Aggarwal&apos;,&apos;Darius Obama&apos;,&apos;Shelton Rana&apos;,&apos;Jackson Stephen&apos;,&apos;Rochelle Grey&apos;,&apos;Kermit Chaudhari&apos;,&apos;Branda&apos;,&apos;Casandra Peter&apos;,&apos;Lorna Chaudhari&apos;,&apos;Angela Peter&apos;,&apos;China India&apos;,&apos;Alena Goblin&apos;,&apos;Barrett Chaudhari&apos;,&apos;Aaron Singh&apos;,&apos;Jeffrey Sansa&apos;,&apos;Shane Kumar&apos;,&apos;Melinda Patel&apos;,&apos;Valencia Peter&apos;,&apos;Jacque Nicolus&apos;,&apos;Venessa&apos;,&apos;Harold&apos;,&apos;Charol Peter&apos;,&apos;Rebbecca Peter&apos;,&apos;Melissa&apos;,&apos;Diego Narula&apos;,&apos;Jorge Aggarwal&apos;,&apos;Katie Hanks&apos;,&apos;Denise Aggarwal&apos;,&apos;Lorita Eric&apos;,&apos;Anthony Peter&apos;,&apos;Debbie Aggarwal&apos;,&apos;Jason Nicolus&apos;,&apos;Kassie Sansa&apos;,&apos;Misty Nicolus&apos;,&apos;Misti Dianne&apos;,&apos;Lashay Tonia&apos;,&apos;Mariana Peter&apos;,&apos;Kevin Vickie&apos;,&apos;Magda Ralph&apos;,&apos;Maureen Aggarwal&apos;,&apos;Frederick Emmaline&apos;,&apos;Marylee Katelyn&apos;,&apos;Birdee Loren&apos;,&apos;Melvin Delbert&apos;,&apos;Mittie Clarence&apos;,&apos;Demetra Aggarwal&apos;,&apos;Nancy Vaughn&apos;,&apos;Arminda Garrett&apos;,&apos;Keith Trudy&apos;,&apos;Theresia Kelly&apos;];

//SYNTAX
 vars.put(&quot;randName&quot;,firstNames[Math.floor(Math.random() * firstNames.length)]);

// USED FOR Address
var address = [&apos;Savage&apos;, &apos;Stephens&apos;, &apos;Sparks&apos;, &apos;Stark&apos;, &apos;Sparks&apos;, &apos;Bottin&apos;, &apos;Jones&apos;, &apos;Arthurson&apos;, &apos;Harden&apos;, &apos;Gray&apos;, &apos;Bryson&apos;, &apos;Matthison&apos;, &apos;Wilson&apos;, &apos;Ivey&apos;, &apos;Netzley&apos;, &apos;Piche&apos;,&apos;Metz&apos;,&apos;Cass&apos;,&apos;Kuzma&apos;,&apos;Reno&apos;,&apos;Avis&apos;,&apos;Saville&apos;,&apos;Selvey&apos;,&apos;Stoecker&apos;,&apos;Auerbach&apos;,&apos;Eilerman&apos;,&apos;Holsey&apos;,&apos;Zepp&apos;,&apos;Davids&apos;,&apos;Foster&apos;,&apos;Sim&apos;,&apos;Messana&apos;,&apos;Schloss&apos;,&apos;Sylvester&apos;,&apos;Leathers&apos;,&apos;Niles&apos;,&apos;Combs&apos;,&apos;Phillips&apos;,&apos;Augsburger&apos;,&apos;Stroman&apos;,&apos;Beveridge&apos;,&apos;Gattis&apos;,&apos;Minnis&apos;,&apos;Fortes&apos;,&apos;Ullman&apos;,&apos;Bunkley&apos;,&apos;Spivey&apos;,&apos;Sterrett&apos;,&apos;Crist&apos;,&apos;Chow&apos;,&apos;Lierman&apos;,&apos;Ashalintubbi&apos;,&apos;Laura&apos;,&apos;Crawford&apos;,&apos;Balmer&apos;,&apos;Mcmullin&apos;,&apos;Dussault&apos;,&apos;Holbrook&apos;,&apos;Dion&apos;,&apos;Lechler&apos;,&apos;Beaton&apos;,&apos;Elzey&apos;,&apos;Sams&apos;,&apos;Irby&apos;,&apos;Hollaway&apos;,&apos;Levert&apos;,&apos;Gough&apos;,&apos;Croom&apos;,&apos;Dedman&apos;,&apos;Hatmaker&apos;,&apos;Tippetts&apos;,&apos;Odoms&apos;,&apos;Banaszak&apos;,&apos;Viveros&apos;,&apos;Hempstead&apos;,&apos;Tower&apos;,&apos;Atlas&apos;,&apos;Lozoya&apos;,&apos;Fulp&apos;,&apos;Corbo&apos;,&apos;Chapell&apos;,&apos;Monier&apos;,&apos;Selle&apos;,&apos;Parenti&apos;,&apos;Karl&apos;,&apos;Kuehn&apos;,&apos;Speers&apos;,&apos;Cambron&apos;,&apos;Blossom&apos;,&apos;Peart&apos;,&apos;Gunter&apos;,&apos;Hagenbuch&apos;,&apos;Amend&apos;,&apos;Tiernan&apos;,&apos;Ayala&apos;,&apos;Maclenn&apos;,&apos;Golden&apos;,&apos;Colone&apos;,&apos;Golding&apos;,&apos;Landreth&apos;,&apos;Shams&apos;,&apos;Liddle&apos;,&apos;Alley&apos;,&apos;Levy&apos;,&apos;Barajas&apos;,&apos;Tetrault&apos;,&apos;Shue&apos;,&apos;Lenton&apos;,&apos;Boss&apos;,&apos;Weedman&apos;,&apos;Bergeron&apos;,&apos;Valls&apos;,&apos;Pooler&apos;,&apos;Mollett&apos;,&apos;Viger&apos;,&apos;Donnellan&apos;,&apos;Dedeaux&apos;];
//SYNTAX
vars.put(&quot;address&quot;,address[Math.floor(Math.random() * address.length)]);
// USED FOR LastName
var lastName = [&apos;Savage&apos;, &apos;Stephens&apos;, &apos;Sparks&apos;, &apos;Stark&apos;, &apos;Sparks&apos;, &apos;Bottin&apos;, &apos;Jones&apos;, &apos;Arthurson&apos;, &apos;Harden&apos;, &apos;Gray&apos;, &apos;Bryson&apos;, &apos;Matthison&apos;, &apos;Wilson&apos;, &apos;Ivey&apos;, &apos;Netzley&apos;, &apos;Piche&apos;,&apos;Metz&apos;,&apos;Cass&apos;,&apos;Kuzma&apos;,&apos;Reno&apos;,&apos;Avis&apos;,&apos;Saville&apos;,&apos;Selvey&apos;,&apos;Stoecker&apos;,&apos;Auerbach&apos;,&apos;Eilerman&apos;,&apos;Holsey&apos;,&apos;Zepp&apos;,&apos;Davids&apos;,&apos;Foster&apos;,&apos;Sim&apos;,&apos;Messana&apos;,&apos;Schloss&apos;,&apos;Sylvester&apos;,&apos;Leathers&apos;,&apos;Niles&apos;,&apos;Combs&apos;,&apos;Phillips&apos;,&apos;Augsburger&apos;,&apos;Stroman&apos;,&apos;Beveridge&apos;,&apos;Gattis&apos;,&apos;Minnis&apos;,&apos;Fortes&apos;,&apos;Ullman&apos;,&apos;Bunkley&apos;,&apos;Spivey&apos;,&apos;Sterrett&apos;,&apos;Crist&apos;,&apos;Chow&apos;,&apos;Lierman&apos;,&apos;Ashalintubbi&apos;,&apos;Laura&apos;,&apos;Crawford&apos;,&apos;Balmer&apos;,&apos;Mcmullin&apos;,&apos;Dussault&apos;,&apos;Holbrook&apos;,&apos;Dion&apos;,&apos;Lechler&apos;,&apos;Beaton&apos;,&apos;Elzey&apos;,&apos;Sams&apos;,&apos;Irby&apos;,&apos;Hollaway&apos;,&apos;Levert&apos;,&apos;Gough&apos;,&apos;Croom&apos;,&apos;Dedman&apos;,&apos;Hatmaker&apos;,&apos;Tippetts&apos;,&apos;Odoms&apos;,&apos;Banaszak&apos;,&apos;Viveros&apos;,&apos;Hempstead&apos;,&apos;Tower&apos;,&apos;Atlas&apos;,&apos;Lozoya&apos;,&apos;Fulp&apos;,&apos;Corbo&apos;,&apos;Chapell&apos;,&apos;Monier&apos;,&apos;Selle&apos;,&apos;Parenti&apos;,&apos;Karl&apos;,&apos;Kuehn&apos;,&apos;Speers&apos;,&apos;Cambron&apos;,&apos;Blossom&apos;,&apos;Peart&apos;,&apos;Gunter&apos;,&apos;Hagenbuch&apos;,&apos;Amend&apos;,&apos;Tiernan&apos;,&apos;Ayala&apos;,&apos;Maclenn&apos;,&apos;Golden&apos;,&apos;Colone&apos;,&apos;Golding&apos;,&apos;Landreth&apos;,&apos;Shams&apos;,&apos;Liddle&apos;,&apos;Alley&apos;,&apos;Levy&apos;,&apos;Barajas&apos;,&apos;Tetrault&apos;,&apos;Shue&apos;,&apos;Lenton&apos;,&apos;Boss&apos;,&apos;Weedman&apos;,&apos;Bergeron&apos;,&apos;Valls&apos;,&apos;Pooler&apos;,&apos;Mollett&apos;,&apos;Viger&apos;,&apos;Donnellan&apos;,&apos;Dedeaux&apos;];
//SYNTAX
vars.put(&quot;lastName&quot;,lastName[Math.floor(Math.random() * lastName.length)]);

// USED FOR STATES
var states = [&apos;Alabama&apos;,&apos;Alaska&apos;,&apos;Arizona&apos;,&apos;Arkansas&apos;,&apos;California&apos;,&apos;Colorado&apos;,&apos;Connecticut&apos;,&apos;Delaware&apos;,&apos;Florida&apos;,&apos;Georgia&apos;,&apos;Hawaii&apos;,&apos;Idaho&apos;,&apos;Illinois&apos;,&apos;Indiana&apos;,&apos;Iowa&apos;,&apos;Kansas&apos;,&apos;Kentucky&apos;,&apos;Louisiana&apos;,&apos;Maine&apos;,&apos;Maryland&apos;,&apos;Massachusetts&apos;,&apos;Michigan&apos;,&apos;Minnesota&apos;,&apos;Mississippi&apos;,&apos;Missouri&apos;,&apos;Montana&apos;,&apos;Nebraska&apos;,&apos;Nevada&apos;,&apos;New Hampshire&apos;,&apos;New Jersey&apos;,&apos;New Mexico&apos;,&apos;New York&apos;,&apos;North Carolina&apos;,&apos;North Dakota&apos;,&apos;Ohio&apos;,&apos;Oklahoma&apos;,&apos;Oregon&apos;,&apos;Pennsylvania&apos;,&apos;Rhode Island&apos;,&apos;South Carolina&apos;,&apos;South Dakota&apos;,&apos;Tennessee&apos;,&apos;Texas&apos;,&apos;Utah&apos;,&apos;Vermont&apos;,&apos;Virginia&apos;,&apos;Washington&apos;,&apos;West Virginia&apos;,&apos;Wisconsin&apos;,&apos;Wyoming&apos;];
//SYNTAX
vars.put(&quot;randState&quot;,states[Math.floor(Math.random() * states.length)]);

// USED FOR STATE CODE

var scode=[&apos;AL&apos;,&apos;AK&apos;,&apos;AZ&apos;,&apos;AR&apos;,&apos;CA&apos;,&apos;CO&apos;,&apos;CT&apos;,&apos;DE&apos;,&apos;DC&apos;,&apos;FL&apos;,&apos;GA&apos;,&apos;HI&apos;,&apos;ID&apos;,&apos;IL&apos;,&apos;IN&apos;,&apos;IA&apos;,&apos;KS&apos;,&apos;KY&apos;,&apos;LA&apos;,&apos;ME&apos;,&apos;MD&apos;,&apos;MA&apos;,&apos;MI&apos;,&apos;MN&apos;,&apos;MS&apos;,&apos;MO&apos;,&apos;MT&apos;,&apos;NE&apos;,&apos;NV&apos;,&apos;NH&apos;,&apos;NJ&apos;,&apos;NM&apos;,&apos;NY&apos;,&apos;NC&apos;,&apos;ND&apos;,&apos;OH&apos;,&apos;OK&apos;,&apos;OR&apos;,&apos;PA&apos;,&apos;RI&apos;,&apos;SC&apos;,&apos;SD&apos;,&apos;TN&apos;,&apos;TX&apos;,&apos;UT&apos;,&apos;VT&apos;,&apos;VA&apos;,&apos;WA&apos;,&apos;WV&apos;,&apos;WI&apos;,&apos;WY&apos;]
//SYNTAX
vars.put(&quot;randStateCode&quot;,scode[Math.floor(Math.random() * scode.length)]);


// USED FOR LOCATION NAME

var locationName=[&apos;Franklin&apos;,&apos;Clinton&apos;,&apos;Clinton&apos;,&apos;Washington&apos;,&apos;Madison&apos;,&apos;Arlington&apos;,&apos;Franklin&apos;,&apos;Washington&apos;,&apos;Chester&apos;,&apos;Georgetown&apos;,&apos;Madison&apos;,&apos;Salem&apos;,&apos;Chester&apos;,&apos;Marion&apos;,&apos;Fairfield&apos;,&apos;Greenville&apos;,&apos;Kingston&apos;,&apos;Marion&apos;,&apos;Riverside&apos;,&apos;Springfield&apos;]

vars.put(&quot;randlocationName&quot;,locationName[Math.floor(Math.random() * locationName.length)]);


// USED FOR EMAIL
 var email=[&apos;hai.nguyen&apos;,&apos;josh.warrick&apos;,&apos;chris.jowett&apos;,&apos;mark.vanderlugt&apos;,&apos;luke.coleman&apos;,&apos;ohalushchak&apos;,&apos;timothy.werner&apos;,&apos;mike.milligan&apos;,&apos;esavrasov&apos;,&apos;srawat&apos;,&apos;avysotskaya&apos;,&apos;kdelehoidin&apos;];

//SYNTAX
vars.put(&quot;emailId&quot;,email[Math.floor(Math.random() * email.length)]);


// USED FOR CITY

var city=[&apos;New York&apos;,&apos;Philadelphia&apos;,&apos;Boston&apos;,&apos;Charleston&apos;,&apos;Baltimore&apos;,&apos;Northern Liberties&apos;,&apos;Salem&apos;,&apos;Newport&apos;,&apos;Providence&apos;,&apos;Marblehead&apos;,&apos;Southwark&apos;,&apos;Little Rock&apos;]

//Syntax

vars.put(&quot;city&quot;,city[Math.floor(Math.random() * city.length)]);

/*

// USED FOR TIME ZONE
var timezone=[&apos;US/Chicago&apos;,&apos;US/Denver&apos;,&apos;US/Phoenix&apos;,&apos;US/Los Angeles&apos;,&apos;US/Anchorage&apos;,&apos;US/Honolulu&apos;,&apos;US/Alabama&apos;,&apos;US/Florida&apos;,&apos;US/Georgia&apos;,&apos;US/Hawaii&apos;]

//Syntax
vars.put(&quot;timezone&quot;,timezone[Math.floor(Math.random() * timezone.length)]);

*/

vars.put(&quot;randZipCode&quot;,Math.floor(Math.random() * 90000) + 10000);
vars.put(&quot;randState&quot;,states[Math.floor(Math.random() * states.length)]);
vars.put(&quot;randPhoneNumber&quot;,Math.floor(Math.random() * 9000000000) + 1000000000);




</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ABCFS-ORGANIZATION-ID</stringProp>
                    <stringProp name="Header.value">${orgId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get_Developers" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/developer</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get_Developer" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/developer/${developerId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Merge_Developer_Not_Working" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;firstName&quot; : &quot;AAJohn&quot;,&#xd;
  &quot;lastName&quot; : &quot;AADoe&quot;,&#xd;
  &quot;phone&quot; : {&#xd;
    &quot;number&quot; : &quot;8112345&quot;,&#xd;
    &quot;extension&quot; : &quot;38&quot;&#xd;
  },&#xd;
  &quot;email&quot; : &quot;81john.doe@qa4life.com&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/developer/${developerId}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Patch_Developer_Not_Working" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[ {&#xd;
  &quot;op&quot; : &quot;remove&quot;,&#xd;
  &quot;path&quot; : &quot;/email&quot;&#xd;
}, {&#xd;
  &quot;op&quot; : &quot;add&quot;,&#xd;
  &quot;path&quot; : &quot;/email&quot;,&#xd;
  &quot;value&quot; : &quot;91john.doePatched@qa4life.com&quot;&#xd;
}, {&#xd;
  &quot;op&quot; : &quot;test&quot;,&#xd;
  &quot;path&quot; : &quot;/firstName&quot;,&#xd;
  &quot;value&quot; : &quot;John&quot;&#xd;
} ]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/developer/${developerId}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Put_Developer" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&#xd;
{&#xd;
  &quot;firstName&quot; : &quot;AAJohn&quot;,&#xd;
  &quot;lastName&quot; : &quot;AADoe&quot;,&#xd;
  &quot;phone&quot; : {&#xd;
    &quot;number&quot; : &quot;9812345&quot;,&#xd;
    &quot;extension&quot; : &quot;38&quot;&#xd;
  },&#xd;
  &quot;email&quot; : &quot;${__V(${emailId}_${__Random(1,10000,)}@qa4life.com)}&quot;,&#xd;
  &quot;id&quot; : &quot;11e915ce-706d-2c85-87d2-1970bc01d257&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/developer/${developerId}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">ABCFS-ORGANIZATION-ID</stringProp>
                    <stringProp name="Header.value">${orgId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete_Developer" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/developer/${developerId}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get_Removed_Developer" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/archive/developer?page=0&amp;size=500</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Undelete_Developer" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;status&quot; : &quot;active&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/archive/developer/${developerId}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create_Developer_Photo" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;content&quot; : &quot;U2lnbmVkIHdpdGggYmxvb2Q=&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/developer/${developerId}/photo</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">photoId</stringProp>
                <stringProp name="RegexExtractor.regex">{&quot;id&quot;:&quot;(.*)&quot;,&quot;firstName&quot;:&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// USED FOR NAME

var firstNames = [&apos;Michael Stark&apos;, &apos;Alicia Jolly&apos;, &apos;Thomas Peter&apos;, &apos;Olivia Stark&apos;, &apos;Daniel Singh&apos;, &apos;Candice Stark&apos;, &apos;Barbara Phoghat&apos;, &apos;Matthew Stark&apos;, &apos;Craig Patel&apos;,&apos;Tammy Stark&apos;,&apos;Heaven Jones&apos;,&apos;Floretta Katte&apos;,&apos;Sylvester Peter&apos;,&apos;Mandi Stark&apos;,&apos;Damion Modi&apos;,&apos;Jacklyn Jha&apos;,&apos;Taina Aggarwal&apos;,&apos;Myrtle Gupta&apos;,&apos;Ernest Pasricha&apos;,&apos;Dorsey Tina&apos;,&apos;Wilber Mehta&apos;,&apos;Lacie Kohli&apos;,&apos;Orena Yuvraj&apos;,&apos;Eliana Thakur&apos;,&apos;Marilyn Adhikari&apos;,&apos;Sharita Chaudhari&apos;,&apos;Rufina Pack&apos;,&apos;Isiah Adhikari&apos;,&apos;Lavenia Aggarwal&apos;,&apos;Coleman Adhikari&apos;,&apos;Donald Trump&apos;,&apos;Jannette Adhikari&apos;,&apos;Zaida Aggarwal&apos;,&apos;Darius Obama&apos;,&apos;Shelton Rana&apos;,&apos;Jackson Stephen&apos;,&apos;Rochelle Grey&apos;,&apos;Kermit Chaudhari&apos;,&apos;Branda&apos;,&apos;Casandra Peter&apos;,&apos;Lorna Chaudhari&apos;,&apos;Angela Peter&apos;,&apos;China India&apos;,&apos;Alena Goblin&apos;,&apos;Barrett Chaudhari&apos;,&apos;Aaron Singh&apos;,&apos;Jeffrey Sansa&apos;,&apos;Shane Kumar&apos;,&apos;Melinda Patel&apos;,&apos;Valencia Peter&apos;,&apos;Jacque Nicolus&apos;,&apos;Venessa&apos;,&apos;Harold&apos;,&apos;Charol Peter&apos;,&apos;Rebbecca Peter&apos;,&apos;Melissa&apos;,&apos;Diego Narula&apos;,&apos;Jorge Aggarwal&apos;,&apos;Katie Hanks&apos;,&apos;Denise Aggarwal&apos;,&apos;Lorita Eric&apos;,&apos;Anthony Peter&apos;,&apos;Debbie Aggarwal&apos;,&apos;Jason Nicolus&apos;,&apos;Kassie Sansa&apos;,&apos;Misty Nicolus&apos;,&apos;Misti Dianne&apos;,&apos;Lashay Tonia&apos;,&apos;Mariana Peter&apos;,&apos;Kevin Vickie&apos;,&apos;Magda Ralph&apos;,&apos;Maureen Aggarwal&apos;,&apos;Frederick Emmaline&apos;,&apos;Marylee Katelyn&apos;,&apos;Birdee Loren&apos;,&apos;Melvin Delbert&apos;,&apos;Mittie Clarence&apos;,&apos;Demetra Aggarwal&apos;,&apos;Nancy Vaughn&apos;,&apos;Arminda Garrett&apos;,&apos;Keith Trudy&apos;,&apos;Theresia Kelly&apos;];

//SYNTAX
 vars.put(&quot;randName&quot;,firstNames[Math.floor(Math.random() * firstNames.length)]);

// USED FOR Address
var address = [&apos;Savage&apos;, &apos;Stephens&apos;, &apos;Sparks&apos;, &apos;Stark&apos;, &apos;Sparks&apos;, &apos;Bottin&apos;, &apos;Jones&apos;, &apos;Arthurson&apos;, &apos;Harden&apos;, &apos;Gray&apos;, &apos;Bryson&apos;, &apos;Matthison&apos;, &apos;Wilson&apos;, &apos;Ivey&apos;, &apos;Netzley&apos;, &apos;Piche&apos;,&apos;Metz&apos;,&apos;Cass&apos;,&apos;Kuzma&apos;,&apos;Reno&apos;,&apos;Avis&apos;,&apos;Saville&apos;,&apos;Selvey&apos;,&apos;Stoecker&apos;,&apos;Auerbach&apos;,&apos;Eilerman&apos;,&apos;Holsey&apos;,&apos;Zepp&apos;,&apos;Davids&apos;,&apos;Foster&apos;,&apos;Sim&apos;,&apos;Messana&apos;,&apos;Schloss&apos;,&apos;Sylvester&apos;,&apos;Leathers&apos;,&apos;Niles&apos;,&apos;Combs&apos;,&apos;Phillips&apos;,&apos;Augsburger&apos;,&apos;Stroman&apos;,&apos;Beveridge&apos;,&apos;Gattis&apos;,&apos;Minnis&apos;,&apos;Fortes&apos;,&apos;Ullman&apos;,&apos;Bunkley&apos;,&apos;Spivey&apos;,&apos;Sterrett&apos;,&apos;Crist&apos;,&apos;Chow&apos;,&apos;Lierman&apos;,&apos;Ashalintubbi&apos;,&apos;Laura&apos;,&apos;Crawford&apos;,&apos;Balmer&apos;,&apos;Mcmullin&apos;,&apos;Dussault&apos;,&apos;Holbrook&apos;,&apos;Dion&apos;,&apos;Lechler&apos;,&apos;Beaton&apos;,&apos;Elzey&apos;,&apos;Sams&apos;,&apos;Irby&apos;,&apos;Hollaway&apos;,&apos;Levert&apos;,&apos;Gough&apos;,&apos;Croom&apos;,&apos;Dedman&apos;,&apos;Hatmaker&apos;,&apos;Tippetts&apos;,&apos;Odoms&apos;,&apos;Banaszak&apos;,&apos;Viveros&apos;,&apos;Hempstead&apos;,&apos;Tower&apos;,&apos;Atlas&apos;,&apos;Lozoya&apos;,&apos;Fulp&apos;,&apos;Corbo&apos;,&apos;Chapell&apos;,&apos;Monier&apos;,&apos;Selle&apos;,&apos;Parenti&apos;,&apos;Karl&apos;,&apos;Kuehn&apos;,&apos;Speers&apos;,&apos;Cambron&apos;,&apos;Blossom&apos;,&apos;Peart&apos;,&apos;Gunter&apos;,&apos;Hagenbuch&apos;,&apos;Amend&apos;,&apos;Tiernan&apos;,&apos;Ayala&apos;,&apos;Maclenn&apos;,&apos;Golden&apos;,&apos;Colone&apos;,&apos;Golding&apos;,&apos;Landreth&apos;,&apos;Shams&apos;,&apos;Liddle&apos;,&apos;Alley&apos;,&apos;Levy&apos;,&apos;Barajas&apos;,&apos;Tetrault&apos;,&apos;Shue&apos;,&apos;Lenton&apos;,&apos;Boss&apos;,&apos;Weedman&apos;,&apos;Bergeron&apos;,&apos;Valls&apos;,&apos;Pooler&apos;,&apos;Mollett&apos;,&apos;Viger&apos;,&apos;Donnellan&apos;,&apos;Dedeaux&apos;];
//SYNTAX
vars.put(&quot;address&quot;,address[Math.floor(Math.random() * address.length)]);
// USED FOR LastName
var lastName = [&apos;Savage&apos;, &apos;Stephens&apos;, &apos;Sparks&apos;, &apos;Stark&apos;, &apos;Sparks&apos;, &apos;Bottin&apos;, &apos;Jones&apos;, &apos;Arthurson&apos;, &apos;Harden&apos;, &apos;Gray&apos;, &apos;Bryson&apos;, &apos;Matthison&apos;, &apos;Wilson&apos;, &apos;Ivey&apos;, &apos;Netzley&apos;, &apos;Piche&apos;,&apos;Metz&apos;,&apos;Cass&apos;,&apos;Kuzma&apos;,&apos;Reno&apos;,&apos;Avis&apos;,&apos;Saville&apos;,&apos;Selvey&apos;,&apos;Stoecker&apos;,&apos;Auerbach&apos;,&apos;Eilerman&apos;,&apos;Holsey&apos;,&apos;Zepp&apos;,&apos;Davids&apos;,&apos;Foster&apos;,&apos;Sim&apos;,&apos;Messana&apos;,&apos;Schloss&apos;,&apos;Sylvester&apos;,&apos;Leathers&apos;,&apos;Niles&apos;,&apos;Combs&apos;,&apos;Phillips&apos;,&apos;Augsburger&apos;,&apos;Stroman&apos;,&apos;Beveridge&apos;,&apos;Gattis&apos;,&apos;Minnis&apos;,&apos;Fortes&apos;,&apos;Ullman&apos;,&apos;Bunkley&apos;,&apos;Spivey&apos;,&apos;Sterrett&apos;,&apos;Crist&apos;,&apos;Chow&apos;,&apos;Lierman&apos;,&apos;Ashalintubbi&apos;,&apos;Laura&apos;,&apos;Crawford&apos;,&apos;Balmer&apos;,&apos;Mcmullin&apos;,&apos;Dussault&apos;,&apos;Holbrook&apos;,&apos;Dion&apos;,&apos;Lechler&apos;,&apos;Beaton&apos;,&apos;Elzey&apos;,&apos;Sams&apos;,&apos;Irby&apos;,&apos;Hollaway&apos;,&apos;Levert&apos;,&apos;Gough&apos;,&apos;Croom&apos;,&apos;Dedman&apos;,&apos;Hatmaker&apos;,&apos;Tippetts&apos;,&apos;Odoms&apos;,&apos;Banaszak&apos;,&apos;Viveros&apos;,&apos;Hempstead&apos;,&apos;Tower&apos;,&apos;Atlas&apos;,&apos;Lozoya&apos;,&apos;Fulp&apos;,&apos;Corbo&apos;,&apos;Chapell&apos;,&apos;Monier&apos;,&apos;Selle&apos;,&apos;Parenti&apos;,&apos;Karl&apos;,&apos;Kuehn&apos;,&apos;Speers&apos;,&apos;Cambron&apos;,&apos;Blossom&apos;,&apos;Peart&apos;,&apos;Gunter&apos;,&apos;Hagenbuch&apos;,&apos;Amend&apos;,&apos;Tiernan&apos;,&apos;Ayala&apos;,&apos;Maclenn&apos;,&apos;Golden&apos;,&apos;Colone&apos;,&apos;Golding&apos;,&apos;Landreth&apos;,&apos;Shams&apos;,&apos;Liddle&apos;,&apos;Alley&apos;,&apos;Levy&apos;,&apos;Barajas&apos;,&apos;Tetrault&apos;,&apos;Shue&apos;,&apos;Lenton&apos;,&apos;Boss&apos;,&apos;Weedman&apos;,&apos;Bergeron&apos;,&apos;Valls&apos;,&apos;Pooler&apos;,&apos;Mollett&apos;,&apos;Viger&apos;,&apos;Donnellan&apos;,&apos;Dedeaux&apos;];
//SYNTAX
vars.put(&quot;lastName&quot;,lastName[Math.floor(Math.random() * lastName.length)]);

// USED FOR STATES
var states = [&apos;Alabama&apos;,&apos;Alaska&apos;,&apos;Arizona&apos;,&apos;Arkansas&apos;,&apos;California&apos;,&apos;Colorado&apos;,&apos;Connecticut&apos;,&apos;Delaware&apos;,&apos;Florida&apos;,&apos;Georgia&apos;,&apos;Hawaii&apos;,&apos;Idaho&apos;,&apos;Illinois&apos;,&apos;Indiana&apos;,&apos;Iowa&apos;,&apos;Kansas&apos;,&apos;Kentucky&apos;,&apos;Louisiana&apos;,&apos;Maine&apos;,&apos;Maryland&apos;,&apos;Massachusetts&apos;,&apos;Michigan&apos;,&apos;Minnesota&apos;,&apos;Mississippi&apos;,&apos;Missouri&apos;,&apos;Montana&apos;,&apos;Nebraska&apos;,&apos;Nevada&apos;,&apos;New Hampshire&apos;,&apos;New Jersey&apos;,&apos;New Mexico&apos;,&apos;New York&apos;,&apos;North Carolina&apos;,&apos;North Dakota&apos;,&apos;Ohio&apos;,&apos;Oklahoma&apos;,&apos;Oregon&apos;,&apos;Pennsylvania&apos;,&apos;Rhode Island&apos;,&apos;South Carolina&apos;,&apos;South Dakota&apos;,&apos;Tennessee&apos;,&apos;Texas&apos;,&apos;Utah&apos;,&apos;Vermont&apos;,&apos;Virginia&apos;,&apos;Washington&apos;,&apos;West Virginia&apos;,&apos;Wisconsin&apos;,&apos;Wyoming&apos;];
//SYNTAX
vars.put(&quot;randState&quot;,states[Math.floor(Math.random() * states.length)]);

// USED FOR STATE CODE

var scode=[&apos;AL&apos;,&apos;AK&apos;,&apos;AZ&apos;,&apos;AR&apos;,&apos;CA&apos;,&apos;CO&apos;,&apos;CT&apos;,&apos;DE&apos;,&apos;DC&apos;,&apos;FL&apos;,&apos;GA&apos;,&apos;HI&apos;,&apos;ID&apos;,&apos;IL&apos;,&apos;IN&apos;,&apos;IA&apos;,&apos;KS&apos;,&apos;KY&apos;,&apos;LA&apos;,&apos;ME&apos;,&apos;MD&apos;,&apos;MA&apos;,&apos;MI&apos;,&apos;MN&apos;,&apos;MS&apos;,&apos;MO&apos;,&apos;MT&apos;,&apos;NE&apos;,&apos;NV&apos;,&apos;NH&apos;,&apos;NJ&apos;,&apos;NM&apos;,&apos;NY&apos;,&apos;NC&apos;,&apos;ND&apos;,&apos;OH&apos;,&apos;OK&apos;,&apos;OR&apos;,&apos;PA&apos;,&apos;RI&apos;,&apos;SC&apos;,&apos;SD&apos;,&apos;TN&apos;,&apos;TX&apos;,&apos;UT&apos;,&apos;VT&apos;,&apos;VA&apos;,&apos;WA&apos;,&apos;WV&apos;,&apos;WI&apos;,&apos;WY&apos;]
//SYNTAX
vars.put(&quot;randStateCode&quot;,scode[Math.floor(Math.random() * scode.length)]);


// USED FOR LOCATION NAME

var locationName=[&apos;Franklin&apos;,&apos;Clinton&apos;,&apos;Clinton&apos;,&apos;Washington&apos;,&apos;Madison&apos;,&apos;Arlington&apos;,&apos;Franklin&apos;,&apos;Washington&apos;,&apos;Chester&apos;,&apos;Georgetown&apos;,&apos;Madison&apos;,&apos;Salem&apos;,&apos;Chester&apos;,&apos;Marion&apos;,&apos;Fairfield&apos;,&apos;Greenville&apos;,&apos;Kingston&apos;,&apos;Marion&apos;,&apos;Riverside&apos;,&apos;Springfield&apos;]

vars.put(&quot;randlocationName&quot;,locationName[Math.floor(Math.random() * locationName.length)]);


// USED FOR EMAIL
 var email=[&apos;hai.nguyen&apos;,&apos;josh.warrick&apos;,&apos;chris.jowett&apos;,&apos;mark.vanderlugt&apos;,&apos;luke.coleman&apos;,&apos;ohalushchak&apos;,&apos;timothy.werner&apos;,&apos;mike.milligan&apos;,&apos;esavrasov&apos;,&apos;srawat&apos;,&apos;avysotskaya&apos;,&apos;kdelehoidin&apos;];

//SYNTAX
vars.put(&quot;emailId&quot;,email[Math.floor(Math.random() * email.length)]);


// USED FOR CITY

var city=[&apos;New York&apos;,&apos;Philadelphia&apos;,&apos;Boston&apos;,&apos;Charleston&apos;,&apos;Baltimore&apos;,&apos;Northern Liberties&apos;,&apos;Salem&apos;,&apos;Newport&apos;,&apos;Providence&apos;,&apos;Marblehead&apos;,&apos;Southwark&apos;,&apos;Little Rock&apos;]

//Syntax

vars.put(&quot;city&quot;,city[Math.floor(Math.random() * city.length)]);

/*

// USED FOR TIME ZONE
var timezone=[&apos;US/Chicago&apos;,&apos;US/Denver&apos;,&apos;US/Phoenix&apos;,&apos;US/Los Angeles&apos;,&apos;US/Anchorage&apos;,&apos;US/Honolulu&apos;,&apos;US/Alabama&apos;,&apos;US/Florida&apos;,&apos;US/Georgia&apos;,&apos;US/Hawaii&apos;]

//Syntax
vars.put(&quot;timezone&quot;,timezone[Math.floor(Math.random() * timezone.length)]);

*/

vars.put(&quot;randZipCode&quot;,Math.floor(Math.random() * 90000) + 10000);
vars.put(&quot;randState&quot;,states[Math.floor(Math.random() * states.length)]);
vars.put(&quot;randPhoneNumber&quot;,Math.floor(Math.random() * 9000000000) + 1000000000);




</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Download_Developer_Photo" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${organization}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/developer/${developerId}/photo</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${authId}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
